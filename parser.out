Created by PLY version 3.7 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> vars programp main
Rule 2     programp -> functions programp
Rule 3     programp -> empty
Rule 4     sexp -> expression sexprima
Rule 5     sexprima -> AND sexp
Rule 6     sexprima -> OR sexp
Rule 7     sexprima -> empty
Rule 8     expression -> exp expressionp
Rule 9     expressionp -> < exp
Rule 10    expressionp -> > exp
Rule 11    expressionp -> LTEQ exp
Rule 12    expressionp -> GTEQ exp
Rule 13    expressionp -> EQ exp
Rule 14    expressionp -> DIFF exp
Rule 15    expressionp -> empty
Rule 16    exp -> term expp
Rule 17    expp -> + exp
Rule 18    expp -> - exp
Rule 19    expp -> empty
Rule 20    term -> factor termp
Rule 21    termp -> / term
Rule 22    termp -> * term
Rule 23    termp -> empty
Rule 24    factor -> cons
Rule 25    factor -> ( sexp )
Rule 26    cons -> id
Rule 27    cons -> CTEI
Rule 28    cons -> CTEF
Rule 29    cons -> CTES
Rule 30    returntype -> VOID
Rule 31    returntype -> INT
Rule 32    returntype -> FLOAT
Rule 33    type -> INT
Rule 34    type -> FLOAT
Rule 35    type -> ARRINT arrp
Rule 36    type -> ARRFLOAT arrp
Rule 37    arrp -> [ CTEI ]
Rule 38    main -> MAIN ( ) block
Rule 39    block -> { body }
Rule 40    body -> vars statmp
Rule 41    statmp -> statm statmp
Rule 42    statmp -> empty
Rule 43    statm -> asign
Rule 44    statm -> cond
Rule 45    statm -> write
Rule 46    statm -> for
Rule 47    statm -> while
Rule 48    statm -> draw
Rule 49    statm -> empty
Rule 50    functions -> FUNCTION returntype ID ( functionsp ) block
Rule 51    functions -> empty
Rule 52    functionsp -> param
Rule 53    functionsp -> empty
Rule 54    param -> type ID paramp
Rule 55    paramp -> , param
Rule 56    paramp -> empty
Rule 57    vars -> varsp
Rule 58    vars -> empty
Rule 59    varsp -> type varspp ; varsp
Rule 60    varsp -> empty
Rule 61    varspp -> ID varsppaux
Rule 62    varsppaux -> , varspp
Rule 63    varsppaux -> empty
Rule 64    asign -> vars
Rule 65    asign -> ID asignp
Rule 66    asignp -> = sexp ;
Rule 67    asignp -> [ sexp ] = sexp ;
Rule 68    cond -> IF ( sexp ) block condp
Rule 69    condp -> ELSE block
Rule 70    condp -> empty
Rule 71    write -> PRINT ( writep ) ;
Rule 72    writep -> sexp writepp
Rule 73    writep -> CTES writepp
Rule 74    writep -> id writepp
Rule 75    writepp -> , writep
Rule 76    writepp -> empty
Rule 77    for -> FOR ( asign ; sexp ; sexp ) block
Rule 78    while -> WHILE ( sexp ) block
Rule 79    draw -> line
Rule 80    draw -> rect
Rule 81    draw -> teapot
Rule 82    draw -> cube
Rule 83    draw -> color
Rule 84    draw -> triangle
Rule 85    draw -> circle
Rule 86    draw -> arc
Rule 87    draw -> width
Rule 88    id -> ID idp
Rule 89    idp -> [ sexp ]
Rule 90    idp -> ( idpp )
Rule 91    idp -> empty
Rule 92    idpp -> sexp idppaux
Rule 93    idpp -> empty
Rule 94    idppaux -> , idpp
Rule 95    idppaux -> empty
Rule 96    line -> LINE ( sexp , sexp , sexp , sexp ) ;
Rule 97    rect -> RECT ( sexp , sexp , sexp , sexp ) ;
Rule 98    teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ;
Rule 99    triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ;
Rule 100   cube -> CUBE ( sexp , sexp , sexp , sexp ) ;
Rule 101   color -> COLOR ( sexp , sexp , sexp ) ;
Rule 102   arc -> ARC ( sexp , sexp , sexp , sexp ) ;
Rule 103   circle -> CIRCLE ( sexp , sexp , sexp ) ;
Rule 104   width -> WIDTH ( sexp ) ;
Rule 105   empty -> <empty>

Terminals, with rules where they appear

(                    : 25 38 50 68 71 77 78 90 96 97 98 99 100 101 102 103 104
)                    : 25 38 50 68 71 77 78 90 96 97 98 99 100 101 102 103 104
*                    : 22
+                    : 17
,                    : 55 62 75 94 96 96 96 97 97 97 98 98 98 99 99 99 100 100 100 101 101 102 102 102 103 103
-                    : 18
/                    : 21
;                    : 59 66 67 71 77 77 96 97 98 99 100 101 102 103 104
<                    : 9
=                    : 66 67
>                    : 10
AND                  : 5
ARC                  : 102
ARRFLOAT             : 36
ARRINT               : 35
CIRCLE               : 103
COLOR                : 101
CTEF                 : 28
CTEI                 : 27 37
CTES                 : 29 73
CUBE                 : 100
DIFF                 : 14
ELSE                 : 69
EQ                   : 13
FLOAT                : 32 34
FOR                  : 77
FUNCTION             : 50
GTEQ                 : 12
ID                   : 50 54 61 65 88
IF                   : 68
INT                  : 31 33
LINE                 : 96
LTEQ                 : 11
MAIN                 : 38
OR                   : 6
PRINT                : 71
RECT                 : 97
TEAPOT               : 98
TRIANGLE             : 99
VOID                 : 30
WHILE                : 78
WIDTH                : 104
[                    : 37 67 89
]                    : 37 67 89
error                : 
{                    : 39
}                    : 39

Nonterminals, with rules where they appear

arc                  : 86
arrp                 : 35 36
asign                : 43 77
asignp               : 65
block                : 38 50 68 69 77 78
body                 : 39
circle               : 85
color                : 83
cond                 : 44
condp                : 68
cons                 : 24
cube                 : 82
draw                 : 48
empty                : 3 7 15 19 23 42 49 51 53 56 58 60 63 70 76 91 93 95
exp                  : 8 9 10 11 12 13 14 17 18
expp                 : 16
expression           : 4
expressionp          : 8
factor               : 20
for                  : 46
functions            : 2
functionsp           : 50
id                   : 26 74
idp                  : 88
idpp                 : 90 94
idppaux              : 92
line                 : 79
main                 : 1
param                : 52 55
paramp               : 54
program              : 0
programp             : 1 2
rect                 : 80
returntype           : 50
sexp                 : 5 6 25 66 67 67 68 72 77 77 78 89 92 96 96 96 96 97 97 97 97 98 98 98 98 99 99 99 99 100 100 100 100 101 101 101 102 102 102 102 103 103 103 104
sexprima             : 4
statm                : 41
statmp               : 40 41
teapot               : 81
term                 : 16 21 22
termp                : 20
triangle             : 84
type                 : 54 59
vars                 : 1 40 64
varsp                : 57 59
varspp               : 59 62
varsppaux            : 61
while                : 47
width                : 87
write                : 45
writep               : 71 75
writepp              : 72 73 74

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . vars programp main
    (57) vars -> . varsp
    (58) vars -> . empty
    (59) varsp -> . type varspp ; varsp
    (60) varsp -> . empty
    (105) empty -> .
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . ARRINT arrp
    (36) type -> . ARRFLOAT arrp

    FUNCTION        reduce using rule 105 (empty -> .)
    MAIN            reduce using rule 105 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    ARRINT          shift and go to state 1
    ARRFLOAT        shift and go to state 2

    vars                           shift and go to state 3
    program                        shift and go to state 6
    varsp                          shift and go to state 7
    type                           shift and go to state 8
    empty                          shift and go to state 9

state 1

    (35) type -> ARRINT . arrp
    (37) arrp -> . [ CTEI ]

    [               shift and go to state 10

    arrp                           shift and go to state 11

state 2

    (36) type -> ARRFLOAT . arrp
    (37) arrp -> . [ CTEI ]

    [               shift and go to state 10

    arrp                           shift and go to state 12

state 3

    (1) program -> vars . programp main
    (2) programp -> . functions programp
    (3) programp -> . empty
    (50) functions -> . FUNCTION returntype ID ( functionsp ) block
    (51) functions -> . empty
    (105) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 105 (empty -> .)

  ! FUNCTION        [ reduce using rule 105 (empty -> .) ]

    functions                      shift and go to state 14
    programp                       shift and go to state 15
    empty                          shift and go to state 16

state 4

    (33) type -> INT .

    ID              reduce using rule 33 (type -> INT .)


state 5

    (34) type -> FLOAT .

    ID              reduce using rule 34 (type -> FLOAT .)


state 6

    (0) S' -> program .



state 7

    (57) vars -> varsp .

    ID              reduce using rule 57 (vars -> varsp .)
    IF              reduce using rule 57 (vars -> varsp .)
    PRINT           reduce using rule 57 (vars -> varsp .)
    FOR             reduce using rule 57 (vars -> varsp .)
    WHILE           reduce using rule 57 (vars -> varsp .)
    LINE            reduce using rule 57 (vars -> varsp .)
    RECT            reduce using rule 57 (vars -> varsp .)
    TEAPOT          reduce using rule 57 (vars -> varsp .)
    CUBE            reduce using rule 57 (vars -> varsp .)
    COLOR           reduce using rule 57 (vars -> varsp .)
    TRIANGLE        reduce using rule 57 (vars -> varsp .)
    CIRCLE          reduce using rule 57 (vars -> varsp .)
    ARC             reduce using rule 57 (vars -> varsp .)
    WIDTH           reduce using rule 57 (vars -> varsp .)
    INT             reduce using rule 57 (vars -> varsp .)
    FLOAT           reduce using rule 57 (vars -> varsp .)
    ARRINT          reduce using rule 57 (vars -> varsp .)
    ARRFLOAT        reduce using rule 57 (vars -> varsp .)
    }               reduce using rule 57 (vars -> varsp .)
    ;               reduce using rule 57 (vars -> varsp .)
    FUNCTION        reduce using rule 57 (vars -> varsp .)
    MAIN            reduce using rule 57 (vars -> varsp .)


state 8

    (59) varsp -> type . varspp ; varsp
    (61) varspp -> . ID varsppaux

    ID              shift and go to state 18

    varspp                         shift and go to state 17

state 9

    (58) vars -> empty .
    (60) varsp -> empty .

  ! reduce/reduce conflict for ID resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for PRINT resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for LINE resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for RECT resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for TEAPOT resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for CUBE resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for COLOR resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for TRIANGLE resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for CIRCLE resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for ARC resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for WIDTH resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for ARRINT resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for ARRFLOAT resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for } resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for ; resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 58 (vars -> empty .)
  ! reduce/reduce conflict for MAIN resolved using rule 58 (vars -> empty .)
    ID              reduce using rule 58 (vars -> empty .)
    IF              reduce using rule 58 (vars -> empty .)
    PRINT           reduce using rule 58 (vars -> empty .)
    FOR             reduce using rule 58 (vars -> empty .)
    WHILE           reduce using rule 58 (vars -> empty .)
    LINE            reduce using rule 58 (vars -> empty .)
    RECT            reduce using rule 58 (vars -> empty .)
    TEAPOT          reduce using rule 58 (vars -> empty .)
    CUBE            reduce using rule 58 (vars -> empty .)
    COLOR           reduce using rule 58 (vars -> empty .)
    TRIANGLE        reduce using rule 58 (vars -> empty .)
    CIRCLE          reduce using rule 58 (vars -> empty .)
    ARC             reduce using rule 58 (vars -> empty .)
    WIDTH           reduce using rule 58 (vars -> empty .)
    INT             reduce using rule 58 (vars -> empty .)
    FLOAT           reduce using rule 58 (vars -> empty .)
    ARRINT          reduce using rule 58 (vars -> empty .)
    ARRFLOAT        reduce using rule 58 (vars -> empty .)
    }               reduce using rule 58 (vars -> empty .)
    ;               reduce using rule 58 (vars -> empty .)
    FUNCTION        reduce using rule 58 (vars -> empty .)
    MAIN            reduce using rule 58 (vars -> empty .)

  ! ID              [ reduce using rule 60 (varsp -> empty .) ]
  ! IF              [ reduce using rule 60 (varsp -> empty .) ]
  ! PRINT           [ reduce using rule 60 (varsp -> empty .) ]
  ! FOR             [ reduce using rule 60 (varsp -> empty .) ]
  ! WHILE           [ reduce using rule 60 (varsp -> empty .) ]
  ! LINE            [ reduce using rule 60 (varsp -> empty .) ]
  ! RECT            [ reduce using rule 60 (varsp -> empty .) ]
  ! TEAPOT          [ reduce using rule 60 (varsp -> empty .) ]
  ! CUBE            [ reduce using rule 60 (varsp -> empty .) ]
  ! COLOR           [ reduce using rule 60 (varsp -> empty .) ]
  ! TRIANGLE        [ reduce using rule 60 (varsp -> empty .) ]
  ! CIRCLE          [ reduce using rule 60 (varsp -> empty .) ]
  ! ARC             [ reduce using rule 60 (varsp -> empty .) ]
  ! WIDTH           [ reduce using rule 60 (varsp -> empty .) ]
  ! INT             [ reduce using rule 60 (varsp -> empty .) ]
  ! FLOAT           [ reduce using rule 60 (varsp -> empty .) ]
  ! ARRINT          [ reduce using rule 60 (varsp -> empty .) ]
  ! ARRFLOAT        [ reduce using rule 60 (varsp -> empty .) ]
  ! }               [ reduce using rule 60 (varsp -> empty .) ]
  ! ;               [ reduce using rule 60 (varsp -> empty .) ]
  ! FUNCTION        [ reduce using rule 60 (varsp -> empty .) ]
  ! MAIN            [ reduce using rule 60 (varsp -> empty .) ]


state 10

    (37) arrp -> [ . CTEI ]

    CTEI            shift and go to state 19


state 11

    (35) type -> ARRINT arrp .

    ID              reduce using rule 35 (type -> ARRINT arrp .)


state 12

    (36) type -> ARRFLOAT arrp .

    ID              reduce using rule 36 (type -> ARRFLOAT arrp .)


state 13

    (50) functions -> FUNCTION . returntype ID ( functionsp ) block
    (30) returntype -> . VOID
    (31) returntype -> . INT
    (32) returntype -> . FLOAT

    VOID            shift and go to state 20
    INT             shift and go to state 22
    FLOAT           shift and go to state 21

    returntype                     shift and go to state 23

state 14

    (2) programp -> functions . programp
    (2) programp -> . functions programp
    (3) programp -> . empty
    (50) functions -> . FUNCTION returntype ID ( functionsp ) block
    (51) functions -> . empty
    (105) empty -> .

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 105 (empty -> .)

  ! FUNCTION        [ reduce using rule 105 (empty -> .) ]

    functions                      shift and go to state 14
    programp                       shift and go to state 24
    empty                          shift and go to state 16

state 15

    (1) program -> vars programp . main
    (38) main -> . MAIN ( ) block

    MAIN            shift and go to state 25

    main                           shift and go to state 26

state 16

    (3) programp -> empty .
    (51) functions -> empty .

  ! reduce/reduce conflict for MAIN resolved using rule 3 (programp -> empty .)
    MAIN            reduce using rule 3 (programp -> empty .)
    FUNCTION        reduce using rule 51 (functions -> empty .)

  ! MAIN            [ reduce using rule 51 (functions -> empty .) ]


state 17

    (59) varsp -> type varspp . ; varsp

    ;               shift and go to state 27


state 18

    (61) varspp -> ID . varsppaux
    (62) varsppaux -> . , varspp
    (63) varsppaux -> . empty
    (105) empty -> .

    ,               shift and go to state 30
    ;               reduce using rule 105 (empty -> .)

    varsppaux                      shift and go to state 28
    empty                          shift and go to state 29

state 19

    (37) arrp -> [ CTEI . ]

    ]               shift and go to state 31


state 20

    (30) returntype -> VOID .

    ID              reduce using rule 30 (returntype -> VOID .)


state 21

    (32) returntype -> FLOAT .

    ID              reduce using rule 32 (returntype -> FLOAT .)


state 22

    (31) returntype -> INT .

    ID              reduce using rule 31 (returntype -> INT .)


state 23

    (50) functions -> FUNCTION returntype . ID ( functionsp ) block

    ID              shift and go to state 32


state 24

    (2) programp -> functions programp .

    MAIN            reduce using rule 2 (programp -> functions programp .)


state 25

    (38) main -> MAIN . ( ) block

    (               shift and go to state 33


state 26

    (1) program -> vars programp main .

    $end            reduce using rule 1 (program -> vars programp main .)


state 27

    (59) varsp -> type varspp ; . varsp
    (59) varsp -> . type varspp ; varsp
    (60) varsp -> . empty
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . ARRINT arrp
    (36) type -> . ARRFLOAT arrp
    (105) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ARRINT resolved as shift
  ! shift/reduce conflict for ARRFLOAT resolved as shift
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    ARRINT          shift and go to state 1
    ARRFLOAT        shift and go to state 2
    FUNCTION        reduce using rule 105 (empty -> .)
    MAIN            reduce using rule 105 (empty -> .)
    ID              reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    PRINT           reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    WHILE           reduce using rule 105 (empty -> .)
    LINE            reduce using rule 105 (empty -> .)
    RECT            reduce using rule 105 (empty -> .)
    TEAPOT          reduce using rule 105 (empty -> .)
    CUBE            reduce using rule 105 (empty -> .)
    COLOR           reduce using rule 105 (empty -> .)
    TRIANGLE        reduce using rule 105 (empty -> .)
    CIRCLE          reduce using rule 105 (empty -> .)
    ARC             reduce using rule 105 (empty -> .)
    WIDTH           reduce using rule 105 (empty -> .)
    }               reduce using rule 105 (empty -> .)
    ;               reduce using rule 105 (empty -> .)

  ! INT             [ reduce using rule 105 (empty -> .) ]
  ! FLOAT           [ reduce using rule 105 (empty -> .) ]
  ! ARRINT          [ reduce using rule 105 (empty -> .) ]
  ! ARRFLOAT        [ reduce using rule 105 (empty -> .) ]

    varsp                          shift and go to state 34
    type                           shift and go to state 8
    empty                          shift and go to state 35

state 28

    (61) varspp -> ID varsppaux .

    ;               reduce using rule 61 (varspp -> ID varsppaux .)


state 29

    (63) varsppaux -> empty .

    ;               reduce using rule 63 (varsppaux -> empty .)


state 30

    (62) varsppaux -> , . varspp
    (61) varspp -> . ID varsppaux

    ID              shift and go to state 18

    varspp                         shift and go to state 36

state 31

    (37) arrp -> [ CTEI ] .

    ID              reduce using rule 37 (arrp -> [ CTEI ] .)


state 32

    (50) functions -> FUNCTION returntype ID . ( functionsp ) block

    (               shift and go to state 37


state 33

    (38) main -> MAIN ( . ) block

    )               shift and go to state 38


state 34

    (59) varsp -> type varspp ; varsp .

    ID              reduce using rule 59 (varsp -> type varspp ; varsp .)
    IF              reduce using rule 59 (varsp -> type varspp ; varsp .)
    PRINT           reduce using rule 59 (varsp -> type varspp ; varsp .)
    FOR             reduce using rule 59 (varsp -> type varspp ; varsp .)
    WHILE           reduce using rule 59 (varsp -> type varspp ; varsp .)
    LINE            reduce using rule 59 (varsp -> type varspp ; varsp .)
    RECT            reduce using rule 59 (varsp -> type varspp ; varsp .)
    TEAPOT          reduce using rule 59 (varsp -> type varspp ; varsp .)
    CUBE            reduce using rule 59 (varsp -> type varspp ; varsp .)
    COLOR           reduce using rule 59 (varsp -> type varspp ; varsp .)
    TRIANGLE        reduce using rule 59 (varsp -> type varspp ; varsp .)
    CIRCLE          reduce using rule 59 (varsp -> type varspp ; varsp .)
    ARC             reduce using rule 59 (varsp -> type varspp ; varsp .)
    WIDTH           reduce using rule 59 (varsp -> type varspp ; varsp .)
    INT             reduce using rule 59 (varsp -> type varspp ; varsp .)
    FLOAT           reduce using rule 59 (varsp -> type varspp ; varsp .)
    ARRINT          reduce using rule 59 (varsp -> type varspp ; varsp .)
    ARRFLOAT        reduce using rule 59 (varsp -> type varspp ; varsp .)
    }               reduce using rule 59 (varsp -> type varspp ; varsp .)
    FUNCTION        reduce using rule 59 (varsp -> type varspp ; varsp .)
    MAIN            reduce using rule 59 (varsp -> type varspp ; varsp .)
    ;               reduce using rule 59 (varsp -> type varspp ; varsp .)


state 35

    (60) varsp -> empty .

    FUNCTION        reduce using rule 60 (varsp -> empty .)
    MAIN            reduce using rule 60 (varsp -> empty .)
    ID              reduce using rule 60 (varsp -> empty .)
    IF              reduce using rule 60 (varsp -> empty .)
    PRINT           reduce using rule 60 (varsp -> empty .)
    FOR             reduce using rule 60 (varsp -> empty .)
    WHILE           reduce using rule 60 (varsp -> empty .)
    LINE            reduce using rule 60 (varsp -> empty .)
    RECT            reduce using rule 60 (varsp -> empty .)
    TEAPOT          reduce using rule 60 (varsp -> empty .)
    CUBE            reduce using rule 60 (varsp -> empty .)
    COLOR           reduce using rule 60 (varsp -> empty .)
    TRIANGLE        reduce using rule 60 (varsp -> empty .)
    CIRCLE          reduce using rule 60 (varsp -> empty .)
    ARC             reduce using rule 60 (varsp -> empty .)
    WIDTH           reduce using rule 60 (varsp -> empty .)
    INT             reduce using rule 60 (varsp -> empty .)
    FLOAT           reduce using rule 60 (varsp -> empty .)
    ARRINT          reduce using rule 60 (varsp -> empty .)
    ARRFLOAT        reduce using rule 60 (varsp -> empty .)
    }               reduce using rule 60 (varsp -> empty .)
    ;               reduce using rule 60 (varsp -> empty .)


state 36

    (62) varsppaux -> , varspp .

    ;               reduce using rule 62 (varsppaux -> , varspp .)


state 37

    (50) functions -> FUNCTION returntype ID ( . functionsp ) block
    (52) functionsp -> . param
    (53) functionsp -> . empty
    (54) param -> . type ID paramp
    (105) empty -> .
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . ARRINT arrp
    (36) type -> . ARRFLOAT arrp

    )               reduce using rule 105 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    ARRINT          shift and go to state 1
    ARRFLOAT        shift and go to state 2

    param                          shift and go to state 39
    functionsp                     shift and go to state 41
    type                           shift and go to state 42
    empty                          shift and go to state 40

state 38

    (38) main -> MAIN ( ) . block
    (39) block -> . { body }

    {               shift and go to state 43

    block                          shift and go to state 44

state 39

    (52) functionsp -> param .

    )               reduce using rule 52 (functionsp -> param .)


state 40

    (53) functionsp -> empty .

    )               reduce using rule 53 (functionsp -> empty .)


state 41

    (50) functions -> FUNCTION returntype ID ( functionsp . ) block

    )               shift and go to state 45


state 42

    (54) param -> type . ID paramp

    ID              shift and go to state 46


state 43

    (39) block -> { . body }
    (40) body -> . vars statmp
    (57) vars -> . varsp
    (58) vars -> . empty
    (59) varsp -> . type varspp ; varsp
    (60) varsp -> . empty
    (105) empty -> .
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . ARRINT arrp
    (36) type -> . ARRFLOAT arrp

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ARRINT resolved as shift
  ! shift/reduce conflict for ARRFLOAT resolved as shift
    ID              reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    PRINT           reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    WHILE           reduce using rule 105 (empty -> .)
    LINE            reduce using rule 105 (empty -> .)
    RECT            reduce using rule 105 (empty -> .)
    TEAPOT          reduce using rule 105 (empty -> .)
    CUBE            reduce using rule 105 (empty -> .)
    COLOR           reduce using rule 105 (empty -> .)
    TRIANGLE        reduce using rule 105 (empty -> .)
    CIRCLE          reduce using rule 105 (empty -> .)
    ARC             reduce using rule 105 (empty -> .)
    WIDTH           reduce using rule 105 (empty -> .)
    }               reduce using rule 105 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    ARRINT          shift and go to state 1
    ARRFLOAT        shift and go to state 2

  ! INT             [ reduce using rule 105 (empty -> .) ]
  ! FLOAT           [ reduce using rule 105 (empty -> .) ]
  ! ARRINT          [ reduce using rule 105 (empty -> .) ]
  ! ARRFLOAT        [ reduce using rule 105 (empty -> .) ]

    body                           shift and go to state 47
    vars                           shift and go to state 48
    varsp                          shift and go to state 7
    type                           shift and go to state 8
    empty                          shift and go to state 9

state 44

    (38) main -> MAIN ( ) block .

    $end            reduce using rule 38 (main -> MAIN ( ) block .)


state 45

    (50) functions -> FUNCTION returntype ID ( functionsp ) . block
    (39) block -> . { body }

    {               shift and go to state 43

    block                          shift and go to state 49

state 46

    (54) param -> type ID . paramp
    (55) paramp -> . , param
    (56) paramp -> . empty
    (105) empty -> .

    ,               shift and go to state 50
    )               reduce using rule 105 (empty -> .)

    empty                          shift and go to state 52
    paramp                         shift and go to state 51

state 47

    (39) block -> { body . }

    }               shift and go to state 53


state 48

    (40) body -> vars . statmp
    (41) statmp -> . statm statmp
    (42) statmp -> . empty
    (43) statm -> . asign
    (44) statm -> . cond
    (45) statm -> . write
    (46) statm -> . for
    (47) statm -> . while
    (48) statm -> . draw
    (49) statm -> . empty
    (105) empty -> .
    (64) asign -> . vars
    (65) asign -> . ID asignp
    (68) cond -> . IF ( sexp ) block condp
    (71) write -> . PRINT ( writep ) ;
    (77) for -> . FOR ( asign ; sexp ; sexp ) block
    (78) while -> . WHILE ( sexp ) block
    (79) draw -> . line
    (80) draw -> . rect
    (81) draw -> . teapot
    (82) draw -> . cube
    (83) draw -> . color
    (84) draw -> . triangle
    (85) draw -> . circle
    (86) draw -> . arc
    (87) draw -> . width
    (57) vars -> . varsp
    (58) vars -> . empty
    (96) line -> . LINE ( sexp , sexp , sexp , sexp ) ;
    (97) rect -> . RECT ( sexp , sexp , sexp , sexp ) ;
    (98) teapot -> . TEAPOT ( sexp , sexp , sexp , sexp ) ;
    (100) cube -> . CUBE ( sexp , sexp , sexp , sexp ) ;
    (101) color -> . COLOR ( sexp , sexp , sexp ) ;
    (99) triangle -> . TRIANGLE ( sexp , sexp , sexp , sexp ) ;
    (103) circle -> . CIRCLE ( sexp , sexp , sexp ) ;
    (102) arc -> . ARC ( sexp , sexp , sexp , sexp ) ;
    (104) width -> . WIDTH ( sexp ) ;
    (59) varsp -> . type varspp ; varsp
    (60) varsp -> . empty
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . ARRINT arrp
    (36) type -> . ARRFLOAT arrp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LINE resolved as shift
  ! shift/reduce conflict for RECT resolved as shift
  ! shift/reduce conflict for TEAPOT resolved as shift
  ! shift/reduce conflict for CUBE resolved as shift
  ! shift/reduce conflict for COLOR resolved as shift
  ! shift/reduce conflict for TRIANGLE resolved as shift
  ! shift/reduce conflict for CIRCLE resolved as shift
  ! shift/reduce conflict for ARC resolved as shift
  ! shift/reduce conflict for WIDTH resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ARRINT resolved as shift
  ! shift/reduce conflict for ARRFLOAT resolved as shift
    }               reduce using rule 105 (empty -> .)
    ID              shift and go to state 69
    IF              shift and go to state 81
    PRINT           shift and go to state 64
    FOR             shift and go to state 77
    WHILE           shift and go to state 60
    LINE            shift and go to state 65
    RECT            shift and go to state 66
    TEAPOT          shift and go to state 57
    CUBE            shift and go to state 73
    COLOR           shift and go to state 83
    TRIANGLE        shift and go to state 54
    CIRCLE          shift and go to state 86
    ARC             shift and go to state 68
    WIDTH           shift and go to state 59
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    ARRINT          shift and go to state 1
    ARRFLOAT        shift and go to state 2

  ! ID              [ reduce using rule 105 (empty -> .) ]
  ! IF              [ reduce using rule 105 (empty -> .) ]
  ! PRINT           [ reduce using rule 105 (empty -> .) ]
  ! FOR             [ reduce using rule 105 (empty -> .) ]
  ! WHILE           [ reduce using rule 105 (empty -> .) ]
  ! LINE            [ reduce using rule 105 (empty -> .) ]
  ! RECT            [ reduce using rule 105 (empty -> .) ]
  ! TEAPOT          [ reduce using rule 105 (empty -> .) ]
  ! CUBE            [ reduce using rule 105 (empty -> .) ]
  ! COLOR           [ reduce using rule 105 (empty -> .) ]
  ! TRIANGLE        [ reduce using rule 105 (empty -> .) ]
  ! CIRCLE          [ reduce using rule 105 (empty -> .) ]
  ! ARC             [ reduce using rule 105 (empty -> .) ]
  ! WIDTH           [ reduce using rule 105 (empty -> .) ]
  ! INT             [ reduce using rule 105 (empty -> .) ]
  ! FLOAT           [ reduce using rule 105 (empty -> .) ]
  ! ARRINT          [ reduce using rule 105 (empty -> .) ]
  ! ARRFLOAT        [ reduce using rule 105 (empty -> .) ]

    vars                           shift and go to state 55
    color                          shift and go to state 56
    statmp                         shift and go to state 58
    arc                            shift and go to state 61
    cond                           shift and go to state 62
    for                            shift and go to state 67
    write                          shift and go to state 70
    width                          shift and go to state 71
    statm                          shift and go to state 79
    circle                         shift and go to state 85
    type                           shift and go to state 8
    empty                          shift and go to state 72
    draw                           shift and go to state 74
    cube                           shift and go to state 75
    triangle                       shift and go to state 76
    line                           shift and go to state 78
    teapot                         shift and go to state 63
    rect                           shift and go to state 80
    asign                          shift and go to state 82
    while                          shift and go to state 84
    varsp                          shift and go to state 7

state 49

    (50) functions -> FUNCTION returntype ID ( functionsp ) block .

    FUNCTION        reduce using rule 50 (functions -> FUNCTION returntype ID ( functionsp ) block .)
    MAIN            reduce using rule 50 (functions -> FUNCTION returntype ID ( functionsp ) block .)


state 50

    (55) paramp -> , . param
    (54) param -> . type ID paramp
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . ARRINT arrp
    (36) type -> . ARRFLOAT arrp

    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    ARRINT          shift and go to state 1
    ARRFLOAT        shift and go to state 2

    type                           shift and go to state 42
    param                          shift and go to state 87

state 51

    (54) param -> type ID paramp .

    )               reduce using rule 54 (param -> type ID paramp .)


state 52

    (56) paramp -> empty .

    )               reduce using rule 56 (paramp -> empty .)


state 53

    (39) block -> { body } .

    ID              reduce using rule 39 (block -> { body } .)
    IF              reduce using rule 39 (block -> { body } .)
    PRINT           reduce using rule 39 (block -> { body } .)
    FOR             reduce using rule 39 (block -> { body } .)
    WHILE           reduce using rule 39 (block -> { body } .)
    LINE            reduce using rule 39 (block -> { body } .)
    RECT            reduce using rule 39 (block -> { body } .)
    TEAPOT          reduce using rule 39 (block -> { body } .)
    CUBE            reduce using rule 39 (block -> { body } .)
    COLOR           reduce using rule 39 (block -> { body } .)
    TRIANGLE        reduce using rule 39 (block -> { body } .)
    CIRCLE          reduce using rule 39 (block -> { body } .)
    ARC             reduce using rule 39 (block -> { body } .)
    WIDTH           reduce using rule 39 (block -> { body } .)
    INT             reduce using rule 39 (block -> { body } .)
    FLOAT           reduce using rule 39 (block -> { body } .)
    ARRINT          reduce using rule 39 (block -> { body } .)
    ARRFLOAT        reduce using rule 39 (block -> { body } .)
    }               reduce using rule 39 (block -> { body } .)
    $end            reduce using rule 39 (block -> { body } .)
    ELSE            reduce using rule 39 (block -> { body } .)
    FUNCTION        reduce using rule 39 (block -> { body } .)
    MAIN            reduce using rule 39 (block -> { body } .)


state 54

    (99) triangle -> TRIANGLE . ( sexp , sexp , sexp , sexp ) ;

    (               shift and go to state 88


state 55

    (64) asign -> vars .

    ;               reduce using rule 64 (asign -> vars .)
    ID              reduce using rule 64 (asign -> vars .)
    IF              reduce using rule 64 (asign -> vars .)
    PRINT           reduce using rule 64 (asign -> vars .)
    FOR             reduce using rule 64 (asign -> vars .)
    WHILE           reduce using rule 64 (asign -> vars .)
    LINE            reduce using rule 64 (asign -> vars .)
    RECT            reduce using rule 64 (asign -> vars .)
    TEAPOT          reduce using rule 64 (asign -> vars .)
    CUBE            reduce using rule 64 (asign -> vars .)
    COLOR           reduce using rule 64 (asign -> vars .)
    TRIANGLE        reduce using rule 64 (asign -> vars .)
    CIRCLE          reduce using rule 64 (asign -> vars .)
    ARC             reduce using rule 64 (asign -> vars .)
    WIDTH           reduce using rule 64 (asign -> vars .)
    INT             reduce using rule 64 (asign -> vars .)
    FLOAT           reduce using rule 64 (asign -> vars .)
    ARRINT          reduce using rule 64 (asign -> vars .)
    ARRFLOAT        reduce using rule 64 (asign -> vars .)
    }               reduce using rule 64 (asign -> vars .)


state 56

    (83) draw -> color .

    ID              reduce using rule 83 (draw -> color .)
    IF              reduce using rule 83 (draw -> color .)
    PRINT           reduce using rule 83 (draw -> color .)
    FOR             reduce using rule 83 (draw -> color .)
    WHILE           reduce using rule 83 (draw -> color .)
    LINE            reduce using rule 83 (draw -> color .)
    RECT            reduce using rule 83 (draw -> color .)
    TEAPOT          reduce using rule 83 (draw -> color .)
    CUBE            reduce using rule 83 (draw -> color .)
    COLOR           reduce using rule 83 (draw -> color .)
    TRIANGLE        reduce using rule 83 (draw -> color .)
    CIRCLE          reduce using rule 83 (draw -> color .)
    ARC             reduce using rule 83 (draw -> color .)
    WIDTH           reduce using rule 83 (draw -> color .)
    INT             reduce using rule 83 (draw -> color .)
    FLOAT           reduce using rule 83 (draw -> color .)
    ARRINT          reduce using rule 83 (draw -> color .)
    ARRFLOAT        reduce using rule 83 (draw -> color .)
    }               reduce using rule 83 (draw -> color .)


state 57

    (98) teapot -> TEAPOT . ( sexp , sexp , sexp , sexp ) ;

    (               shift and go to state 89


state 58

    (40) body -> vars statmp .

    }               reduce using rule 40 (body -> vars statmp .)


state 59

    (104) width -> WIDTH . ( sexp ) ;

    (               shift and go to state 90


state 60

    (78) while -> WHILE . ( sexp ) block

    (               shift and go to state 91


state 61

    (86) draw -> arc .

    ID              reduce using rule 86 (draw -> arc .)
    IF              reduce using rule 86 (draw -> arc .)
    PRINT           reduce using rule 86 (draw -> arc .)
    FOR             reduce using rule 86 (draw -> arc .)
    WHILE           reduce using rule 86 (draw -> arc .)
    LINE            reduce using rule 86 (draw -> arc .)
    RECT            reduce using rule 86 (draw -> arc .)
    TEAPOT          reduce using rule 86 (draw -> arc .)
    CUBE            reduce using rule 86 (draw -> arc .)
    COLOR           reduce using rule 86 (draw -> arc .)
    TRIANGLE        reduce using rule 86 (draw -> arc .)
    CIRCLE          reduce using rule 86 (draw -> arc .)
    ARC             reduce using rule 86 (draw -> arc .)
    WIDTH           reduce using rule 86 (draw -> arc .)
    INT             reduce using rule 86 (draw -> arc .)
    FLOAT           reduce using rule 86 (draw -> arc .)
    ARRINT          reduce using rule 86 (draw -> arc .)
    ARRFLOAT        reduce using rule 86 (draw -> arc .)
    }               reduce using rule 86 (draw -> arc .)


state 62

    (44) statm -> cond .

    ID              reduce using rule 44 (statm -> cond .)
    IF              reduce using rule 44 (statm -> cond .)
    PRINT           reduce using rule 44 (statm -> cond .)
    FOR             reduce using rule 44 (statm -> cond .)
    WHILE           reduce using rule 44 (statm -> cond .)
    LINE            reduce using rule 44 (statm -> cond .)
    RECT            reduce using rule 44 (statm -> cond .)
    TEAPOT          reduce using rule 44 (statm -> cond .)
    CUBE            reduce using rule 44 (statm -> cond .)
    COLOR           reduce using rule 44 (statm -> cond .)
    TRIANGLE        reduce using rule 44 (statm -> cond .)
    CIRCLE          reduce using rule 44 (statm -> cond .)
    ARC             reduce using rule 44 (statm -> cond .)
    WIDTH           reduce using rule 44 (statm -> cond .)
    INT             reduce using rule 44 (statm -> cond .)
    FLOAT           reduce using rule 44 (statm -> cond .)
    ARRINT          reduce using rule 44 (statm -> cond .)
    ARRFLOAT        reduce using rule 44 (statm -> cond .)
    }               reduce using rule 44 (statm -> cond .)


state 63

    (81) draw -> teapot .

    ID              reduce using rule 81 (draw -> teapot .)
    IF              reduce using rule 81 (draw -> teapot .)
    PRINT           reduce using rule 81 (draw -> teapot .)
    FOR             reduce using rule 81 (draw -> teapot .)
    WHILE           reduce using rule 81 (draw -> teapot .)
    LINE            reduce using rule 81 (draw -> teapot .)
    RECT            reduce using rule 81 (draw -> teapot .)
    TEAPOT          reduce using rule 81 (draw -> teapot .)
    CUBE            reduce using rule 81 (draw -> teapot .)
    COLOR           reduce using rule 81 (draw -> teapot .)
    TRIANGLE        reduce using rule 81 (draw -> teapot .)
    CIRCLE          reduce using rule 81 (draw -> teapot .)
    ARC             reduce using rule 81 (draw -> teapot .)
    WIDTH           reduce using rule 81 (draw -> teapot .)
    INT             reduce using rule 81 (draw -> teapot .)
    FLOAT           reduce using rule 81 (draw -> teapot .)
    ARRINT          reduce using rule 81 (draw -> teapot .)
    ARRFLOAT        reduce using rule 81 (draw -> teapot .)
    }               reduce using rule 81 (draw -> teapot .)


state 64

    (71) write -> PRINT . ( writep ) ;

    (               shift and go to state 92


state 65

    (96) line -> LINE . ( sexp , sexp , sexp , sexp ) ;

    (               shift and go to state 93


state 66

    (97) rect -> RECT . ( sexp , sexp , sexp , sexp ) ;

    (               shift and go to state 94


state 67

    (46) statm -> for .

    ID              reduce using rule 46 (statm -> for .)
    IF              reduce using rule 46 (statm -> for .)
    PRINT           reduce using rule 46 (statm -> for .)
    FOR             reduce using rule 46 (statm -> for .)
    WHILE           reduce using rule 46 (statm -> for .)
    LINE            reduce using rule 46 (statm -> for .)
    RECT            reduce using rule 46 (statm -> for .)
    TEAPOT          reduce using rule 46 (statm -> for .)
    CUBE            reduce using rule 46 (statm -> for .)
    COLOR           reduce using rule 46 (statm -> for .)
    TRIANGLE        reduce using rule 46 (statm -> for .)
    CIRCLE          reduce using rule 46 (statm -> for .)
    ARC             reduce using rule 46 (statm -> for .)
    WIDTH           reduce using rule 46 (statm -> for .)
    INT             reduce using rule 46 (statm -> for .)
    FLOAT           reduce using rule 46 (statm -> for .)
    ARRINT          reduce using rule 46 (statm -> for .)
    ARRFLOAT        reduce using rule 46 (statm -> for .)
    }               reduce using rule 46 (statm -> for .)


state 68

    (102) arc -> ARC . ( sexp , sexp , sexp , sexp ) ;

    (               shift and go to state 95


state 69

    (65) asign -> ID . asignp
    (66) asignp -> . = sexp ;
    (67) asignp -> . [ sexp ] = sexp ;

    =               shift and go to state 97
    [               shift and go to state 98

    asignp                         shift and go to state 96

state 70

    (45) statm -> write .

    ID              reduce using rule 45 (statm -> write .)
    IF              reduce using rule 45 (statm -> write .)
    PRINT           reduce using rule 45 (statm -> write .)
    FOR             reduce using rule 45 (statm -> write .)
    WHILE           reduce using rule 45 (statm -> write .)
    LINE            reduce using rule 45 (statm -> write .)
    RECT            reduce using rule 45 (statm -> write .)
    TEAPOT          reduce using rule 45 (statm -> write .)
    CUBE            reduce using rule 45 (statm -> write .)
    COLOR           reduce using rule 45 (statm -> write .)
    TRIANGLE        reduce using rule 45 (statm -> write .)
    CIRCLE          reduce using rule 45 (statm -> write .)
    ARC             reduce using rule 45 (statm -> write .)
    WIDTH           reduce using rule 45 (statm -> write .)
    INT             reduce using rule 45 (statm -> write .)
    FLOAT           reduce using rule 45 (statm -> write .)
    ARRINT          reduce using rule 45 (statm -> write .)
    ARRFLOAT        reduce using rule 45 (statm -> write .)
    }               reduce using rule 45 (statm -> write .)


state 71

    (87) draw -> width .

    ID              reduce using rule 87 (draw -> width .)
    IF              reduce using rule 87 (draw -> width .)
    PRINT           reduce using rule 87 (draw -> width .)
    FOR             reduce using rule 87 (draw -> width .)
    WHILE           reduce using rule 87 (draw -> width .)
    LINE            reduce using rule 87 (draw -> width .)
    RECT            reduce using rule 87 (draw -> width .)
    TEAPOT          reduce using rule 87 (draw -> width .)
    CUBE            reduce using rule 87 (draw -> width .)
    COLOR           reduce using rule 87 (draw -> width .)
    TRIANGLE        reduce using rule 87 (draw -> width .)
    CIRCLE          reduce using rule 87 (draw -> width .)
    ARC             reduce using rule 87 (draw -> width .)
    WIDTH           reduce using rule 87 (draw -> width .)
    INT             reduce using rule 87 (draw -> width .)
    FLOAT           reduce using rule 87 (draw -> width .)
    ARRINT          reduce using rule 87 (draw -> width .)
    ARRFLOAT        reduce using rule 87 (draw -> width .)
    }               reduce using rule 87 (draw -> width .)


state 72

    (42) statmp -> empty .
    (49) statm -> empty .
    (58) vars -> empty .
    (60) varsp -> empty .

  ! reduce/reduce conflict for } resolved using rule 42 (statmp -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for PRINT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for LINE resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for RECT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for TEAPOT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for CUBE resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for COLOR resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for TRIANGLE resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for CIRCLE resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for ARC resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for WIDTH resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for ARRINT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for ARRFLOAT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for } resolved using rule 42 (statmp -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for PRINT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for LINE resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for RECT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for TEAPOT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for CUBE resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for COLOR resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for TRIANGLE resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for CIRCLE resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for ARC resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for WIDTH resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for ARRINT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for ARRFLOAT resolved using rule 49 (statm -> empty .)
  ! reduce/reduce conflict for } resolved using rule 42 (statmp -> empty .)
    }               reduce using rule 42 (statmp -> empty .)
    ID              reduce using rule 49 (statm -> empty .)
    IF              reduce using rule 49 (statm -> empty .)
    PRINT           reduce using rule 49 (statm -> empty .)
    FOR             reduce using rule 49 (statm -> empty .)
    WHILE           reduce using rule 49 (statm -> empty .)
    LINE            reduce using rule 49 (statm -> empty .)
    RECT            reduce using rule 49 (statm -> empty .)
    TEAPOT          reduce using rule 49 (statm -> empty .)
    CUBE            reduce using rule 49 (statm -> empty .)
    COLOR           reduce using rule 49 (statm -> empty .)
    TRIANGLE        reduce using rule 49 (statm -> empty .)
    CIRCLE          reduce using rule 49 (statm -> empty .)
    ARC             reduce using rule 49 (statm -> empty .)
    WIDTH           reduce using rule 49 (statm -> empty .)
    INT             reduce using rule 49 (statm -> empty .)
    FLOAT           reduce using rule 49 (statm -> empty .)
    ARRINT          reduce using rule 49 (statm -> empty .)
    ARRFLOAT        reduce using rule 49 (statm -> empty .)

  ! }               [ reduce using rule 49 (statm -> empty .) ]
  ! ID              [ reduce using rule 58 (vars -> empty .) ]
  ! IF              [ reduce using rule 58 (vars -> empty .) ]
  ! PRINT           [ reduce using rule 58 (vars -> empty .) ]
  ! FOR             [ reduce using rule 58 (vars -> empty .) ]
  ! WHILE           [ reduce using rule 58 (vars -> empty .) ]
  ! LINE            [ reduce using rule 58 (vars -> empty .) ]
  ! RECT            [ reduce using rule 58 (vars -> empty .) ]
  ! TEAPOT          [ reduce using rule 58 (vars -> empty .) ]
  ! CUBE            [ reduce using rule 58 (vars -> empty .) ]
  ! COLOR           [ reduce using rule 58 (vars -> empty .) ]
  ! TRIANGLE        [ reduce using rule 58 (vars -> empty .) ]
  ! CIRCLE          [ reduce using rule 58 (vars -> empty .) ]
  ! ARC             [ reduce using rule 58 (vars -> empty .) ]
  ! WIDTH           [ reduce using rule 58 (vars -> empty .) ]
  ! INT             [ reduce using rule 58 (vars -> empty .) ]
  ! FLOAT           [ reduce using rule 58 (vars -> empty .) ]
  ! ARRINT          [ reduce using rule 58 (vars -> empty .) ]
  ! ARRFLOAT        [ reduce using rule 58 (vars -> empty .) ]
  ! }               [ reduce using rule 58 (vars -> empty .) ]
  ! ID              [ reduce using rule 60 (varsp -> empty .) ]
  ! IF              [ reduce using rule 60 (varsp -> empty .) ]
  ! PRINT           [ reduce using rule 60 (varsp -> empty .) ]
  ! FOR             [ reduce using rule 60 (varsp -> empty .) ]
  ! WHILE           [ reduce using rule 60 (varsp -> empty .) ]
  ! LINE            [ reduce using rule 60 (varsp -> empty .) ]
  ! RECT            [ reduce using rule 60 (varsp -> empty .) ]
  ! TEAPOT          [ reduce using rule 60 (varsp -> empty .) ]
  ! CUBE            [ reduce using rule 60 (varsp -> empty .) ]
  ! COLOR           [ reduce using rule 60 (varsp -> empty .) ]
  ! TRIANGLE        [ reduce using rule 60 (varsp -> empty .) ]
  ! CIRCLE          [ reduce using rule 60 (varsp -> empty .) ]
  ! ARC             [ reduce using rule 60 (varsp -> empty .) ]
  ! WIDTH           [ reduce using rule 60 (varsp -> empty .) ]
  ! INT             [ reduce using rule 60 (varsp -> empty .) ]
  ! FLOAT           [ reduce using rule 60 (varsp -> empty .) ]
  ! ARRINT          [ reduce using rule 60 (varsp -> empty .) ]
  ! ARRFLOAT        [ reduce using rule 60 (varsp -> empty .) ]
  ! }               [ reduce using rule 60 (varsp -> empty .) ]


state 73

    (100) cube -> CUBE . ( sexp , sexp , sexp , sexp ) ;

    (               shift and go to state 99


state 74

    (48) statm -> draw .

    ID              reduce using rule 48 (statm -> draw .)
    IF              reduce using rule 48 (statm -> draw .)
    PRINT           reduce using rule 48 (statm -> draw .)
    FOR             reduce using rule 48 (statm -> draw .)
    WHILE           reduce using rule 48 (statm -> draw .)
    LINE            reduce using rule 48 (statm -> draw .)
    RECT            reduce using rule 48 (statm -> draw .)
    TEAPOT          reduce using rule 48 (statm -> draw .)
    CUBE            reduce using rule 48 (statm -> draw .)
    COLOR           reduce using rule 48 (statm -> draw .)
    TRIANGLE        reduce using rule 48 (statm -> draw .)
    CIRCLE          reduce using rule 48 (statm -> draw .)
    ARC             reduce using rule 48 (statm -> draw .)
    WIDTH           reduce using rule 48 (statm -> draw .)
    INT             reduce using rule 48 (statm -> draw .)
    FLOAT           reduce using rule 48 (statm -> draw .)
    ARRINT          reduce using rule 48 (statm -> draw .)
    ARRFLOAT        reduce using rule 48 (statm -> draw .)
    }               reduce using rule 48 (statm -> draw .)


state 75

    (82) draw -> cube .

    ID              reduce using rule 82 (draw -> cube .)
    IF              reduce using rule 82 (draw -> cube .)
    PRINT           reduce using rule 82 (draw -> cube .)
    FOR             reduce using rule 82 (draw -> cube .)
    WHILE           reduce using rule 82 (draw -> cube .)
    LINE            reduce using rule 82 (draw -> cube .)
    RECT            reduce using rule 82 (draw -> cube .)
    TEAPOT          reduce using rule 82 (draw -> cube .)
    CUBE            reduce using rule 82 (draw -> cube .)
    COLOR           reduce using rule 82 (draw -> cube .)
    TRIANGLE        reduce using rule 82 (draw -> cube .)
    CIRCLE          reduce using rule 82 (draw -> cube .)
    ARC             reduce using rule 82 (draw -> cube .)
    WIDTH           reduce using rule 82 (draw -> cube .)
    INT             reduce using rule 82 (draw -> cube .)
    FLOAT           reduce using rule 82 (draw -> cube .)
    ARRINT          reduce using rule 82 (draw -> cube .)
    ARRFLOAT        reduce using rule 82 (draw -> cube .)
    }               reduce using rule 82 (draw -> cube .)


state 76

    (84) draw -> triangle .

    ID              reduce using rule 84 (draw -> triangle .)
    IF              reduce using rule 84 (draw -> triangle .)
    PRINT           reduce using rule 84 (draw -> triangle .)
    FOR             reduce using rule 84 (draw -> triangle .)
    WHILE           reduce using rule 84 (draw -> triangle .)
    LINE            reduce using rule 84 (draw -> triangle .)
    RECT            reduce using rule 84 (draw -> triangle .)
    TEAPOT          reduce using rule 84 (draw -> triangle .)
    CUBE            reduce using rule 84 (draw -> triangle .)
    COLOR           reduce using rule 84 (draw -> triangle .)
    TRIANGLE        reduce using rule 84 (draw -> triangle .)
    CIRCLE          reduce using rule 84 (draw -> triangle .)
    ARC             reduce using rule 84 (draw -> triangle .)
    WIDTH           reduce using rule 84 (draw -> triangle .)
    INT             reduce using rule 84 (draw -> triangle .)
    FLOAT           reduce using rule 84 (draw -> triangle .)
    ARRINT          reduce using rule 84 (draw -> triangle .)
    ARRFLOAT        reduce using rule 84 (draw -> triangle .)
    }               reduce using rule 84 (draw -> triangle .)


state 77

    (77) for -> FOR . ( asign ; sexp ; sexp ) block

    (               shift and go to state 100


state 78

    (79) draw -> line .

    ID              reduce using rule 79 (draw -> line .)
    IF              reduce using rule 79 (draw -> line .)
    PRINT           reduce using rule 79 (draw -> line .)
    FOR             reduce using rule 79 (draw -> line .)
    WHILE           reduce using rule 79 (draw -> line .)
    LINE            reduce using rule 79 (draw -> line .)
    RECT            reduce using rule 79 (draw -> line .)
    TEAPOT          reduce using rule 79 (draw -> line .)
    CUBE            reduce using rule 79 (draw -> line .)
    COLOR           reduce using rule 79 (draw -> line .)
    TRIANGLE        reduce using rule 79 (draw -> line .)
    CIRCLE          reduce using rule 79 (draw -> line .)
    ARC             reduce using rule 79 (draw -> line .)
    WIDTH           reduce using rule 79 (draw -> line .)
    INT             reduce using rule 79 (draw -> line .)
    FLOAT           reduce using rule 79 (draw -> line .)
    ARRINT          reduce using rule 79 (draw -> line .)
    ARRFLOAT        reduce using rule 79 (draw -> line .)
    }               reduce using rule 79 (draw -> line .)


state 79

    (41) statmp -> statm . statmp
    (41) statmp -> . statm statmp
    (42) statmp -> . empty
    (43) statm -> . asign
    (44) statm -> . cond
    (45) statm -> . write
    (46) statm -> . for
    (47) statm -> . while
    (48) statm -> . draw
    (49) statm -> . empty
    (105) empty -> .
    (64) asign -> . vars
    (65) asign -> . ID asignp
    (68) cond -> . IF ( sexp ) block condp
    (71) write -> . PRINT ( writep ) ;
    (77) for -> . FOR ( asign ; sexp ; sexp ) block
    (78) while -> . WHILE ( sexp ) block
    (79) draw -> . line
    (80) draw -> . rect
    (81) draw -> . teapot
    (82) draw -> . cube
    (83) draw -> . color
    (84) draw -> . triangle
    (85) draw -> . circle
    (86) draw -> . arc
    (87) draw -> . width
    (57) vars -> . varsp
    (58) vars -> . empty
    (96) line -> . LINE ( sexp , sexp , sexp , sexp ) ;
    (97) rect -> . RECT ( sexp , sexp , sexp , sexp ) ;
    (98) teapot -> . TEAPOT ( sexp , sexp , sexp , sexp ) ;
    (100) cube -> . CUBE ( sexp , sexp , sexp , sexp ) ;
    (101) color -> . COLOR ( sexp , sexp , sexp ) ;
    (99) triangle -> . TRIANGLE ( sexp , sexp , sexp , sexp ) ;
    (103) circle -> . CIRCLE ( sexp , sexp , sexp ) ;
    (102) arc -> . ARC ( sexp , sexp , sexp , sexp ) ;
    (104) width -> . WIDTH ( sexp ) ;
    (59) varsp -> . type varspp ; varsp
    (60) varsp -> . empty
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . ARRINT arrp
    (36) type -> . ARRFLOAT arrp

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LINE resolved as shift
  ! shift/reduce conflict for RECT resolved as shift
  ! shift/reduce conflict for TEAPOT resolved as shift
  ! shift/reduce conflict for CUBE resolved as shift
  ! shift/reduce conflict for COLOR resolved as shift
  ! shift/reduce conflict for TRIANGLE resolved as shift
  ! shift/reduce conflict for CIRCLE resolved as shift
  ! shift/reduce conflict for ARC resolved as shift
  ! shift/reduce conflict for WIDTH resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ARRINT resolved as shift
  ! shift/reduce conflict for ARRFLOAT resolved as shift
    }               reduce using rule 105 (empty -> .)
    ID              shift and go to state 69
    IF              shift and go to state 81
    PRINT           shift and go to state 64
    FOR             shift and go to state 77
    WHILE           shift and go to state 60
    LINE            shift and go to state 65
    RECT            shift and go to state 66
    TEAPOT          shift and go to state 57
    CUBE            shift and go to state 73
    COLOR           shift and go to state 83
    TRIANGLE        shift and go to state 54
    CIRCLE          shift and go to state 86
    ARC             shift and go to state 68
    WIDTH           shift and go to state 59
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    ARRINT          shift and go to state 1
    ARRFLOAT        shift and go to state 2

  ! ID              [ reduce using rule 105 (empty -> .) ]
  ! IF              [ reduce using rule 105 (empty -> .) ]
  ! PRINT           [ reduce using rule 105 (empty -> .) ]
  ! FOR             [ reduce using rule 105 (empty -> .) ]
  ! WHILE           [ reduce using rule 105 (empty -> .) ]
  ! LINE            [ reduce using rule 105 (empty -> .) ]
  ! RECT            [ reduce using rule 105 (empty -> .) ]
  ! TEAPOT          [ reduce using rule 105 (empty -> .) ]
  ! CUBE            [ reduce using rule 105 (empty -> .) ]
  ! COLOR           [ reduce using rule 105 (empty -> .) ]
  ! TRIANGLE        [ reduce using rule 105 (empty -> .) ]
  ! CIRCLE          [ reduce using rule 105 (empty -> .) ]
  ! ARC             [ reduce using rule 105 (empty -> .) ]
  ! WIDTH           [ reduce using rule 105 (empty -> .) ]
  ! INT             [ reduce using rule 105 (empty -> .) ]
  ! FLOAT           [ reduce using rule 105 (empty -> .) ]
  ! ARRINT          [ reduce using rule 105 (empty -> .) ]
  ! ARRFLOAT        [ reduce using rule 105 (empty -> .) ]

    vars                           shift and go to state 55
    color                          shift and go to state 56
    statmp                         shift and go to state 101
    arc                            shift and go to state 61
    cond                           shift and go to state 62
    for                            shift and go to state 67
    write                          shift and go to state 70
    width                          shift and go to state 71
    statm                          shift and go to state 79
    circle                         shift and go to state 85
    type                           shift and go to state 8
    empty                          shift and go to state 72
    draw                           shift and go to state 74
    cube                           shift and go to state 75
    triangle                       shift and go to state 76
    line                           shift and go to state 78
    teapot                         shift and go to state 63
    rect                           shift and go to state 80
    asign                          shift and go to state 82
    while                          shift and go to state 84
    varsp                          shift and go to state 7

state 80

    (80) draw -> rect .

    ID              reduce using rule 80 (draw -> rect .)
    IF              reduce using rule 80 (draw -> rect .)
    PRINT           reduce using rule 80 (draw -> rect .)
    FOR             reduce using rule 80 (draw -> rect .)
    WHILE           reduce using rule 80 (draw -> rect .)
    LINE            reduce using rule 80 (draw -> rect .)
    RECT            reduce using rule 80 (draw -> rect .)
    TEAPOT          reduce using rule 80 (draw -> rect .)
    CUBE            reduce using rule 80 (draw -> rect .)
    COLOR           reduce using rule 80 (draw -> rect .)
    TRIANGLE        reduce using rule 80 (draw -> rect .)
    CIRCLE          reduce using rule 80 (draw -> rect .)
    ARC             reduce using rule 80 (draw -> rect .)
    WIDTH           reduce using rule 80 (draw -> rect .)
    INT             reduce using rule 80 (draw -> rect .)
    FLOAT           reduce using rule 80 (draw -> rect .)
    ARRINT          reduce using rule 80 (draw -> rect .)
    ARRFLOAT        reduce using rule 80 (draw -> rect .)
    }               reduce using rule 80 (draw -> rect .)


state 81

    (68) cond -> IF . ( sexp ) block condp

    (               shift and go to state 102


state 82

    (43) statm -> asign .

    ID              reduce using rule 43 (statm -> asign .)
    IF              reduce using rule 43 (statm -> asign .)
    PRINT           reduce using rule 43 (statm -> asign .)
    FOR             reduce using rule 43 (statm -> asign .)
    WHILE           reduce using rule 43 (statm -> asign .)
    LINE            reduce using rule 43 (statm -> asign .)
    RECT            reduce using rule 43 (statm -> asign .)
    TEAPOT          reduce using rule 43 (statm -> asign .)
    CUBE            reduce using rule 43 (statm -> asign .)
    COLOR           reduce using rule 43 (statm -> asign .)
    TRIANGLE        reduce using rule 43 (statm -> asign .)
    CIRCLE          reduce using rule 43 (statm -> asign .)
    ARC             reduce using rule 43 (statm -> asign .)
    WIDTH           reduce using rule 43 (statm -> asign .)
    INT             reduce using rule 43 (statm -> asign .)
    FLOAT           reduce using rule 43 (statm -> asign .)
    ARRINT          reduce using rule 43 (statm -> asign .)
    ARRFLOAT        reduce using rule 43 (statm -> asign .)
    }               reduce using rule 43 (statm -> asign .)


state 83

    (101) color -> COLOR . ( sexp , sexp , sexp ) ;

    (               shift and go to state 103


state 84

    (47) statm -> while .

    ID              reduce using rule 47 (statm -> while .)
    IF              reduce using rule 47 (statm -> while .)
    PRINT           reduce using rule 47 (statm -> while .)
    FOR             reduce using rule 47 (statm -> while .)
    WHILE           reduce using rule 47 (statm -> while .)
    LINE            reduce using rule 47 (statm -> while .)
    RECT            reduce using rule 47 (statm -> while .)
    TEAPOT          reduce using rule 47 (statm -> while .)
    CUBE            reduce using rule 47 (statm -> while .)
    COLOR           reduce using rule 47 (statm -> while .)
    TRIANGLE        reduce using rule 47 (statm -> while .)
    CIRCLE          reduce using rule 47 (statm -> while .)
    ARC             reduce using rule 47 (statm -> while .)
    WIDTH           reduce using rule 47 (statm -> while .)
    INT             reduce using rule 47 (statm -> while .)
    FLOAT           reduce using rule 47 (statm -> while .)
    ARRINT          reduce using rule 47 (statm -> while .)
    ARRFLOAT        reduce using rule 47 (statm -> while .)
    }               reduce using rule 47 (statm -> while .)


state 85

    (85) draw -> circle .

    ID              reduce using rule 85 (draw -> circle .)
    IF              reduce using rule 85 (draw -> circle .)
    PRINT           reduce using rule 85 (draw -> circle .)
    FOR             reduce using rule 85 (draw -> circle .)
    WHILE           reduce using rule 85 (draw -> circle .)
    LINE            reduce using rule 85 (draw -> circle .)
    RECT            reduce using rule 85 (draw -> circle .)
    TEAPOT          reduce using rule 85 (draw -> circle .)
    CUBE            reduce using rule 85 (draw -> circle .)
    COLOR           reduce using rule 85 (draw -> circle .)
    TRIANGLE        reduce using rule 85 (draw -> circle .)
    CIRCLE          reduce using rule 85 (draw -> circle .)
    ARC             reduce using rule 85 (draw -> circle .)
    WIDTH           reduce using rule 85 (draw -> circle .)
    INT             reduce using rule 85 (draw -> circle .)
    FLOAT           reduce using rule 85 (draw -> circle .)
    ARRINT          reduce using rule 85 (draw -> circle .)
    ARRFLOAT        reduce using rule 85 (draw -> circle .)
    }               reduce using rule 85 (draw -> circle .)


state 86

    (103) circle -> CIRCLE . ( sexp , sexp , sexp ) ;

    (               shift and go to state 104


state 87

    (55) paramp -> , param .

    )               reduce using rule 55 (paramp -> , param .)


state 88

    (99) triangle -> TRIANGLE ( . sexp , sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 110
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 89

    (98) teapot -> TEAPOT ( . sexp , sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 117
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 90

    (104) width -> WIDTH ( . sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 118
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 91

    (78) while -> WHILE ( . sexp ) block
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 119
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 92

    (71) write -> PRINT ( . writep ) ;
    (72) writep -> . sexp writepp
    (73) writep -> . CTES writepp
    (74) writep -> . id writepp
    (4) sexp -> . expression sexprima
    (88) id -> . ID idp
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES

    CTES            shift and go to state 122
    ID              shift and go to state 109
    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111

    term                           shift and go to state 106
    cons                           shift and go to state 107
    writep                         shift and go to state 123
    sexp                           shift and go to state 121
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 120

state 93

    (96) line -> LINE ( . sexp , sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 124
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 94

    (97) rect -> RECT ( . sexp , sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 125
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 95

    (102) arc -> ARC ( . sexp , sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 126
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 96

    (65) asign -> ID asignp .

    ;               reduce using rule 65 (asign -> ID asignp .)
    ID              reduce using rule 65 (asign -> ID asignp .)
    IF              reduce using rule 65 (asign -> ID asignp .)
    PRINT           reduce using rule 65 (asign -> ID asignp .)
    FOR             reduce using rule 65 (asign -> ID asignp .)
    WHILE           reduce using rule 65 (asign -> ID asignp .)
    LINE            reduce using rule 65 (asign -> ID asignp .)
    RECT            reduce using rule 65 (asign -> ID asignp .)
    TEAPOT          reduce using rule 65 (asign -> ID asignp .)
    CUBE            reduce using rule 65 (asign -> ID asignp .)
    COLOR           reduce using rule 65 (asign -> ID asignp .)
    TRIANGLE        reduce using rule 65 (asign -> ID asignp .)
    CIRCLE          reduce using rule 65 (asign -> ID asignp .)
    ARC             reduce using rule 65 (asign -> ID asignp .)
    WIDTH           reduce using rule 65 (asign -> ID asignp .)
    INT             reduce using rule 65 (asign -> ID asignp .)
    FLOAT           reduce using rule 65 (asign -> ID asignp .)
    ARRINT          reduce using rule 65 (asign -> ID asignp .)
    ARRFLOAT        reduce using rule 65 (asign -> ID asignp .)
    }               reduce using rule 65 (asign -> ID asignp .)


state 97

    (66) asignp -> = . sexp ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 127
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 98

    (67) asignp -> [ . sexp ] = sexp ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 128
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 99

    (100) cube -> CUBE ( . sexp , sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 129
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 100

    (77) for -> FOR ( . asign ; sexp ; sexp ) block
    (64) asign -> . vars
    (65) asign -> . ID asignp
    (57) vars -> . varsp
    (58) vars -> . empty
    (59) varsp -> . type varspp ; varsp
    (60) varsp -> . empty
    (105) empty -> .
    (33) type -> . INT
    (34) type -> . FLOAT
    (35) type -> . ARRINT arrp
    (36) type -> . ARRFLOAT arrp

    ID              shift and go to state 69
    ;               reduce using rule 105 (empty -> .)
    INT             shift and go to state 4
    FLOAT           shift and go to state 5
    ARRINT          shift and go to state 1
    ARRFLOAT        shift and go to state 2

    vars                           shift and go to state 55
    asign                          shift and go to state 130
    varsp                          shift and go to state 7
    empty                          shift and go to state 9
    type                           shift and go to state 8

state 101

    (41) statmp -> statm statmp .

    }               reduce using rule 41 (statmp -> statm statmp .)


state 102

    (68) cond -> IF ( . sexp ) block condp
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 131
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 103

    (101) color -> COLOR ( . sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 132
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 104

    (103) circle -> CIRCLE ( . sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 133
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 105

    (29) cons -> CTES .

    /               reduce using rule 29 (cons -> CTES .)
    *               reduce using rule 29 (cons -> CTES .)
    +               reduce using rule 29 (cons -> CTES .)
    -               reduce using rule 29 (cons -> CTES .)
    <               reduce using rule 29 (cons -> CTES .)
    >               reduce using rule 29 (cons -> CTES .)
    LTEQ            reduce using rule 29 (cons -> CTES .)
    GTEQ            reduce using rule 29 (cons -> CTES .)
    EQ              reduce using rule 29 (cons -> CTES .)
    DIFF            reduce using rule 29 (cons -> CTES .)
    AND             reduce using rule 29 (cons -> CTES .)
    OR              reduce using rule 29 (cons -> CTES .)
    )               reduce using rule 29 (cons -> CTES .)
    ,               reduce using rule 29 (cons -> CTES .)
    ;               reduce using rule 29 (cons -> CTES .)
    ]               reduce using rule 29 (cons -> CTES .)


state 106

    (16) exp -> term . expp
    (17) expp -> . + exp
    (18) expp -> . - exp
    (19) expp -> . empty
    (105) empty -> .

    +               shift and go to state 134
    -               shift and go to state 136
    <               reduce using rule 105 (empty -> .)
    >               reduce using rule 105 (empty -> .)
    LTEQ            reduce using rule 105 (empty -> .)
    GTEQ            reduce using rule 105 (empty -> .)
    EQ              reduce using rule 105 (empty -> .)
    DIFF            reduce using rule 105 (empty -> .)
    AND             reduce using rule 105 (empty -> .)
    OR              reduce using rule 105 (empty -> .)
    ,               reduce using rule 105 (empty -> .)
    )               reduce using rule 105 (empty -> .)
    ;               reduce using rule 105 (empty -> .)
    ]               reduce using rule 105 (empty -> .)

    expp                           shift and go to state 135
    empty                          shift and go to state 137

state 107

    (24) factor -> cons .

    /               reduce using rule 24 (factor -> cons .)
    *               reduce using rule 24 (factor -> cons .)
    +               reduce using rule 24 (factor -> cons .)
    -               reduce using rule 24 (factor -> cons .)
    <               reduce using rule 24 (factor -> cons .)
    >               reduce using rule 24 (factor -> cons .)
    LTEQ            reduce using rule 24 (factor -> cons .)
    GTEQ            reduce using rule 24 (factor -> cons .)
    EQ              reduce using rule 24 (factor -> cons .)
    DIFF            reduce using rule 24 (factor -> cons .)
    AND             reduce using rule 24 (factor -> cons .)
    OR              reduce using rule 24 (factor -> cons .)
    )               reduce using rule 24 (factor -> cons .)
    ,               reduce using rule 24 (factor -> cons .)
    ;               reduce using rule 24 (factor -> cons .)
    ]               reduce using rule 24 (factor -> cons .)


state 108

    (25) factor -> ( . sexp )
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 138
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 109

    (88) id -> ID . idp
    (89) idp -> . [ sexp ]
    (90) idp -> . ( idpp )
    (91) idp -> . empty
    (105) empty -> .

    [               shift and go to state 141
    (               shift and go to state 139
    /               reduce using rule 105 (empty -> .)
    *               reduce using rule 105 (empty -> .)
    +               reduce using rule 105 (empty -> .)
    -               reduce using rule 105 (empty -> .)
    <               reduce using rule 105 (empty -> .)
    >               reduce using rule 105 (empty -> .)
    LTEQ            reduce using rule 105 (empty -> .)
    GTEQ            reduce using rule 105 (empty -> .)
    EQ              reduce using rule 105 (empty -> .)
    DIFF            reduce using rule 105 (empty -> .)
    AND             reduce using rule 105 (empty -> .)
    OR              reduce using rule 105 (empty -> .)
    ,               reduce using rule 105 (empty -> .)
    )               reduce using rule 105 (empty -> .)
    ;               reduce using rule 105 (empty -> .)
    ]               reduce using rule 105 (empty -> .)

    empty                          shift and go to state 142
    idp                            shift and go to state 140

state 110

    (99) triangle -> TRIANGLE ( sexp . , sexp , sexp , sexp ) ;

    ,               shift and go to state 143


state 111

    (28) cons -> CTEF .

    /               reduce using rule 28 (cons -> CTEF .)
    *               reduce using rule 28 (cons -> CTEF .)
    +               reduce using rule 28 (cons -> CTEF .)
    -               reduce using rule 28 (cons -> CTEF .)
    <               reduce using rule 28 (cons -> CTEF .)
    >               reduce using rule 28 (cons -> CTEF .)
    LTEQ            reduce using rule 28 (cons -> CTEF .)
    GTEQ            reduce using rule 28 (cons -> CTEF .)
    EQ              reduce using rule 28 (cons -> CTEF .)
    DIFF            reduce using rule 28 (cons -> CTEF .)
    AND             reduce using rule 28 (cons -> CTEF .)
    OR              reduce using rule 28 (cons -> CTEF .)
    )               reduce using rule 28 (cons -> CTEF .)
    ,               reduce using rule 28 (cons -> CTEF .)
    ;               reduce using rule 28 (cons -> CTEF .)
    ]               reduce using rule 28 (cons -> CTEF .)


state 112

    (8) expression -> exp . expressionp
    (9) expressionp -> . < exp
    (10) expressionp -> . > exp
    (11) expressionp -> . LTEQ exp
    (12) expressionp -> . GTEQ exp
    (13) expressionp -> . EQ exp
    (14) expressionp -> . DIFF exp
    (15) expressionp -> . empty
    (105) empty -> .

    <               shift and go to state 149
    >               shift and go to state 151
    LTEQ            shift and go to state 145
    GTEQ            shift and go to state 144
    EQ              shift and go to state 148
    DIFF            shift and go to state 146
    AND             reduce using rule 105 (empty -> .)
    OR              reduce using rule 105 (empty -> .)
    ,               reduce using rule 105 (empty -> .)
    )               reduce using rule 105 (empty -> .)
    ;               reduce using rule 105 (empty -> .)
    ]               reduce using rule 105 (empty -> .)

    expressionp                    shift and go to state 147
    empty                          shift and go to state 150

state 113

    (20) term -> factor . termp
    (21) termp -> . / term
    (22) termp -> . * term
    (23) termp -> . empty
    (105) empty -> .

    /               shift and go to state 154
    *               shift and go to state 153
    +               reduce using rule 105 (empty -> .)
    -               reduce using rule 105 (empty -> .)
    <               reduce using rule 105 (empty -> .)
    >               reduce using rule 105 (empty -> .)
    LTEQ            reduce using rule 105 (empty -> .)
    GTEQ            reduce using rule 105 (empty -> .)
    EQ              reduce using rule 105 (empty -> .)
    DIFF            reduce using rule 105 (empty -> .)
    AND             reduce using rule 105 (empty -> .)
    OR              reduce using rule 105 (empty -> .)
    ,               reduce using rule 105 (empty -> .)
    )               reduce using rule 105 (empty -> .)
    ;               reduce using rule 105 (empty -> .)
    ]               reduce using rule 105 (empty -> .)

    termp                          shift and go to state 152
    empty                          shift and go to state 155

state 114

    (27) cons -> CTEI .

    /               reduce using rule 27 (cons -> CTEI .)
    *               reduce using rule 27 (cons -> CTEI .)
    +               reduce using rule 27 (cons -> CTEI .)
    -               reduce using rule 27 (cons -> CTEI .)
    <               reduce using rule 27 (cons -> CTEI .)
    >               reduce using rule 27 (cons -> CTEI .)
    LTEQ            reduce using rule 27 (cons -> CTEI .)
    GTEQ            reduce using rule 27 (cons -> CTEI .)
    EQ              reduce using rule 27 (cons -> CTEI .)
    DIFF            reduce using rule 27 (cons -> CTEI .)
    AND             reduce using rule 27 (cons -> CTEI .)
    OR              reduce using rule 27 (cons -> CTEI .)
    )               reduce using rule 27 (cons -> CTEI .)
    ,               reduce using rule 27 (cons -> CTEI .)
    ;               reduce using rule 27 (cons -> CTEI .)
    ]               reduce using rule 27 (cons -> CTEI .)


state 115

    (4) sexp -> expression . sexprima
    (5) sexprima -> . AND sexp
    (6) sexprima -> . OR sexp
    (7) sexprima -> . empty
    (105) empty -> .

    AND             shift and go to state 156
    OR              shift and go to state 158
    ,               reduce using rule 105 (empty -> .)
    )               reduce using rule 105 (empty -> .)
    ;               reduce using rule 105 (empty -> .)
    ]               reduce using rule 105 (empty -> .)

    sexprima                       shift and go to state 157
    empty                          shift and go to state 159

state 116

    (26) cons -> id .

    /               reduce using rule 26 (cons -> id .)
    *               reduce using rule 26 (cons -> id .)
    +               reduce using rule 26 (cons -> id .)
    -               reduce using rule 26 (cons -> id .)
    <               reduce using rule 26 (cons -> id .)
    >               reduce using rule 26 (cons -> id .)
    LTEQ            reduce using rule 26 (cons -> id .)
    GTEQ            reduce using rule 26 (cons -> id .)
    EQ              reduce using rule 26 (cons -> id .)
    DIFF            reduce using rule 26 (cons -> id .)
    AND             reduce using rule 26 (cons -> id .)
    OR              reduce using rule 26 (cons -> id .)
    )               reduce using rule 26 (cons -> id .)
    ,               reduce using rule 26 (cons -> id .)
    ;               reduce using rule 26 (cons -> id .)
    ]               reduce using rule 26 (cons -> id .)


state 117

    (98) teapot -> TEAPOT ( sexp . , sexp , sexp , sexp ) ;

    ,               shift and go to state 160


state 118

    (104) width -> WIDTH ( sexp . ) ;

    )               shift and go to state 161


state 119

    (78) while -> WHILE ( sexp . ) block

    )               shift and go to state 162


state 120

    (74) writep -> id . writepp
    (26) cons -> id .
    (75) writepp -> . , writep
    (76) writepp -> . empty
    (105) empty -> .

  ! shift/reduce conflict for , resolved as shift
  ! reduce/reduce conflict for ) resolved using rule 26 (cons -> id .)
    /               reduce using rule 26 (cons -> id .)
    *               reduce using rule 26 (cons -> id .)
    +               reduce using rule 26 (cons -> id .)
    -               reduce using rule 26 (cons -> id .)
    <               reduce using rule 26 (cons -> id .)
    >               reduce using rule 26 (cons -> id .)
    LTEQ            reduce using rule 26 (cons -> id .)
    GTEQ            reduce using rule 26 (cons -> id .)
    EQ              reduce using rule 26 (cons -> id .)
    DIFF            reduce using rule 26 (cons -> id .)
    AND             reduce using rule 26 (cons -> id .)
    OR              reduce using rule 26 (cons -> id .)
    )               reduce using rule 26 (cons -> id .)
    ,               shift and go to state 165

  ! ,               [ reduce using rule 26 (cons -> id .) ]
  ! )               [ reduce using rule 105 (empty -> .) ]

    writepp                        shift and go to state 163
    empty                          shift and go to state 164

state 121

    (72) writep -> sexp . writepp
    (75) writepp -> . , writep
    (76) writepp -> . empty
    (105) empty -> .

    ,               shift and go to state 165
    )               reduce using rule 105 (empty -> .)

    writepp                        shift and go to state 166
    empty                          shift and go to state 164

state 122

    (73) writep -> CTES . writepp
    (29) cons -> CTES .
    (75) writepp -> . , writep
    (76) writepp -> . empty
    (105) empty -> .

  ! shift/reduce conflict for , resolved as shift
  ! reduce/reduce conflict for ) resolved using rule 29 (cons -> CTES .)
    /               reduce using rule 29 (cons -> CTES .)
    *               reduce using rule 29 (cons -> CTES .)
    +               reduce using rule 29 (cons -> CTES .)
    -               reduce using rule 29 (cons -> CTES .)
    <               reduce using rule 29 (cons -> CTES .)
    >               reduce using rule 29 (cons -> CTES .)
    LTEQ            reduce using rule 29 (cons -> CTES .)
    GTEQ            reduce using rule 29 (cons -> CTES .)
    EQ              reduce using rule 29 (cons -> CTES .)
    DIFF            reduce using rule 29 (cons -> CTES .)
    AND             reduce using rule 29 (cons -> CTES .)
    OR              reduce using rule 29 (cons -> CTES .)
    )               reduce using rule 29 (cons -> CTES .)
    ,               shift and go to state 165

  ! ,               [ reduce using rule 29 (cons -> CTES .) ]
  ! )               [ reduce using rule 105 (empty -> .) ]

    writepp                        shift and go to state 167
    empty                          shift and go to state 164

state 123

    (71) write -> PRINT ( writep . ) ;

    )               shift and go to state 168


state 124

    (96) line -> LINE ( sexp . , sexp , sexp , sexp ) ;

    ,               shift and go to state 169


state 125

    (97) rect -> RECT ( sexp . , sexp , sexp , sexp ) ;

    ,               shift and go to state 170


state 126

    (102) arc -> ARC ( sexp . , sexp , sexp , sexp ) ;

    ,               shift and go to state 171


state 127

    (66) asignp -> = sexp . ;

    ;               shift and go to state 172


state 128

    (67) asignp -> [ sexp . ] = sexp ;

    ]               shift and go to state 173


state 129

    (100) cube -> CUBE ( sexp . , sexp , sexp , sexp ) ;

    ,               shift and go to state 174


state 130

    (77) for -> FOR ( asign . ; sexp ; sexp ) block

    ;               shift and go to state 175


state 131

    (68) cond -> IF ( sexp . ) block condp

    )               shift and go to state 176


state 132

    (101) color -> COLOR ( sexp . , sexp , sexp ) ;

    ,               shift and go to state 177


state 133

    (103) circle -> CIRCLE ( sexp . , sexp , sexp ) ;

    ,               shift and go to state 178


state 134

    (17) expp -> + . exp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    exp                            shift and go to state 179
    factor                         shift and go to state 113
    id                             shift and go to state 116

state 135

    (16) exp -> term expp .

    <               reduce using rule 16 (exp -> term expp .)
    >               reduce using rule 16 (exp -> term expp .)
    LTEQ            reduce using rule 16 (exp -> term expp .)
    GTEQ            reduce using rule 16 (exp -> term expp .)
    EQ              reduce using rule 16 (exp -> term expp .)
    DIFF            reduce using rule 16 (exp -> term expp .)
    AND             reduce using rule 16 (exp -> term expp .)
    OR              reduce using rule 16 (exp -> term expp .)
    ,               reduce using rule 16 (exp -> term expp .)
    )               reduce using rule 16 (exp -> term expp .)
    ;               reduce using rule 16 (exp -> term expp .)
    ]               reduce using rule 16 (exp -> term expp .)


state 136

    (18) expp -> - . exp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    exp                            shift and go to state 180
    factor                         shift and go to state 113
    id                             shift and go to state 116

state 137

    (19) expp -> empty .

    <               reduce using rule 19 (expp -> empty .)
    >               reduce using rule 19 (expp -> empty .)
    LTEQ            reduce using rule 19 (expp -> empty .)
    GTEQ            reduce using rule 19 (expp -> empty .)
    EQ              reduce using rule 19 (expp -> empty .)
    DIFF            reduce using rule 19 (expp -> empty .)
    AND             reduce using rule 19 (expp -> empty .)
    OR              reduce using rule 19 (expp -> empty .)
    ,               reduce using rule 19 (expp -> empty .)
    )               reduce using rule 19 (expp -> empty .)
    ;               reduce using rule 19 (expp -> empty .)
    ]               reduce using rule 19 (expp -> empty .)


state 138

    (25) factor -> ( sexp . )

    )               shift and go to state 181


state 139

    (90) idp -> ( . idpp )
    (92) idpp -> . sexp idppaux
    (93) idpp -> . empty
    (4) sexp -> . expression sexprima
    (105) empty -> .
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    )               reduce using rule 105 (empty -> .)
    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 182
    idpp                           shift and go to state 183
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116
    empty                          shift and go to state 184

state 140

    (88) id -> ID idp .

    /               reduce using rule 88 (id -> ID idp .)
    *               reduce using rule 88 (id -> ID idp .)
    +               reduce using rule 88 (id -> ID idp .)
    -               reduce using rule 88 (id -> ID idp .)
    <               reduce using rule 88 (id -> ID idp .)
    >               reduce using rule 88 (id -> ID idp .)
    LTEQ            reduce using rule 88 (id -> ID idp .)
    GTEQ            reduce using rule 88 (id -> ID idp .)
    EQ              reduce using rule 88 (id -> ID idp .)
    DIFF            reduce using rule 88 (id -> ID idp .)
    AND             reduce using rule 88 (id -> ID idp .)
    OR              reduce using rule 88 (id -> ID idp .)
    ,               reduce using rule 88 (id -> ID idp .)
    )               reduce using rule 88 (id -> ID idp .)
    ]               reduce using rule 88 (id -> ID idp .)
    ;               reduce using rule 88 (id -> ID idp .)


state 141

    (89) idp -> [ . sexp ]
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 185
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 142

    (91) idp -> empty .

    /               reduce using rule 91 (idp -> empty .)
    *               reduce using rule 91 (idp -> empty .)
    +               reduce using rule 91 (idp -> empty .)
    -               reduce using rule 91 (idp -> empty .)
    <               reduce using rule 91 (idp -> empty .)
    >               reduce using rule 91 (idp -> empty .)
    LTEQ            reduce using rule 91 (idp -> empty .)
    GTEQ            reduce using rule 91 (idp -> empty .)
    EQ              reduce using rule 91 (idp -> empty .)
    DIFF            reduce using rule 91 (idp -> empty .)
    AND             reduce using rule 91 (idp -> empty .)
    OR              reduce using rule 91 (idp -> empty .)
    ,               reduce using rule 91 (idp -> empty .)
    )               reduce using rule 91 (idp -> empty .)
    ;               reduce using rule 91 (idp -> empty .)
    ]               reduce using rule 91 (idp -> empty .)


state 143

    (99) triangle -> TRIANGLE ( sexp , . sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 186
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 144

    (12) expressionp -> GTEQ . exp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    exp                            shift and go to state 187
    factor                         shift and go to state 113
    id                             shift and go to state 116

state 145

    (11) expressionp -> LTEQ . exp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    exp                            shift and go to state 188
    factor                         shift and go to state 113
    id                             shift and go to state 116

state 146

    (14) expressionp -> DIFF . exp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    exp                            shift and go to state 189
    factor                         shift and go to state 113
    id                             shift and go to state 116

state 147

    (8) expression -> exp expressionp .

    AND             reduce using rule 8 (expression -> exp expressionp .)
    OR              reduce using rule 8 (expression -> exp expressionp .)
    ,               reduce using rule 8 (expression -> exp expressionp .)
    )               reduce using rule 8 (expression -> exp expressionp .)
    ;               reduce using rule 8 (expression -> exp expressionp .)
    ]               reduce using rule 8 (expression -> exp expressionp .)


state 148

    (13) expressionp -> EQ . exp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    exp                            shift and go to state 190
    factor                         shift and go to state 113
    id                             shift and go to state 116

state 149

    (9) expressionp -> < . exp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    exp                            shift and go to state 191
    factor                         shift and go to state 113
    id                             shift and go to state 116

state 150

    (15) expressionp -> empty .

    AND             reduce using rule 15 (expressionp -> empty .)
    OR              reduce using rule 15 (expressionp -> empty .)
    ,               reduce using rule 15 (expressionp -> empty .)
    )               reduce using rule 15 (expressionp -> empty .)
    ;               reduce using rule 15 (expressionp -> empty .)
    ]               reduce using rule 15 (expressionp -> empty .)


state 151

    (10) expressionp -> > . exp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    exp                            shift and go to state 192
    factor                         shift and go to state 113
    id                             shift and go to state 116

state 152

    (20) term -> factor termp .

    +               reduce using rule 20 (term -> factor termp .)
    -               reduce using rule 20 (term -> factor termp .)
    <               reduce using rule 20 (term -> factor termp .)
    >               reduce using rule 20 (term -> factor termp .)
    LTEQ            reduce using rule 20 (term -> factor termp .)
    GTEQ            reduce using rule 20 (term -> factor termp .)
    EQ              reduce using rule 20 (term -> factor termp .)
    DIFF            reduce using rule 20 (term -> factor termp .)
    AND             reduce using rule 20 (term -> factor termp .)
    OR              reduce using rule 20 (term -> factor termp .)
    )               reduce using rule 20 (term -> factor termp .)
    ,               reduce using rule 20 (term -> factor termp .)
    ;               reduce using rule 20 (term -> factor termp .)
    ]               reduce using rule 20 (term -> factor termp .)


state 153

    (22) termp -> * . term
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 193
    cons                           shift and go to state 107
    factor                         shift and go to state 113
    id                             shift and go to state 116

state 154

    (21) termp -> / . term
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 194
    cons                           shift and go to state 107
    factor                         shift and go to state 113
    id                             shift and go to state 116

state 155

    (23) termp -> empty .

    +               reduce using rule 23 (termp -> empty .)
    -               reduce using rule 23 (termp -> empty .)
    <               reduce using rule 23 (termp -> empty .)
    >               reduce using rule 23 (termp -> empty .)
    LTEQ            reduce using rule 23 (termp -> empty .)
    GTEQ            reduce using rule 23 (termp -> empty .)
    EQ              reduce using rule 23 (termp -> empty .)
    DIFF            reduce using rule 23 (termp -> empty .)
    AND             reduce using rule 23 (termp -> empty .)
    OR              reduce using rule 23 (termp -> empty .)
    ,               reduce using rule 23 (termp -> empty .)
    )               reduce using rule 23 (termp -> empty .)
    ;               reduce using rule 23 (termp -> empty .)
    ]               reduce using rule 23 (termp -> empty .)


state 156

    (5) sexprima -> AND . sexp
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 195
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 157

    (4) sexp -> expression sexprima .

    ,               reduce using rule 4 (sexp -> expression sexprima .)
    )               reduce using rule 4 (sexp -> expression sexprima .)
    ;               reduce using rule 4 (sexp -> expression sexprima .)
    ]               reduce using rule 4 (sexp -> expression sexprima .)


state 158

    (6) sexprima -> OR . sexp
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 196
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 159

    (7) sexprima -> empty .

    ,               reduce using rule 7 (sexprima -> empty .)
    )               reduce using rule 7 (sexprima -> empty .)
    ;               reduce using rule 7 (sexprima -> empty .)
    ]               reduce using rule 7 (sexprima -> empty .)


state 160

    (98) teapot -> TEAPOT ( sexp , . sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 197
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 161

    (104) width -> WIDTH ( sexp ) . ;

    ;               shift and go to state 198


state 162

    (78) while -> WHILE ( sexp ) . block
    (39) block -> . { body }

    {               shift and go to state 43

    block                          shift and go to state 199

state 163

    (74) writep -> id writepp .

    )               reduce using rule 74 (writep -> id writepp .)


state 164

    (76) writepp -> empty .

    )               reduce using rule 76 (writepp -> empty .)


state 165

    (75) writepp -> , . writep
    (72) writep -> . sexp writepp
    (73) writep -> . CTES writepp
    (74) writep -> . id writepp
    (4) sexp -> . expression sexprima
    (88) id -> . ID idp
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES

    CTES            shift and go to state 122
    ID              shift and go to state 109
    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111

    term                           shift and go to state 106
    cons                           shift and go to state 107
    writep                         shift and go to state 200
    sexp                           shift and go to state 121
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 120

state 166

    (72) writep -> sexp writepp .

    )               reduce using rule 72 (writep -> sexp writepp .)


state 167

    (73) writep -> CTES writepp .

    )               reduce using rule 73 (writep -> CTES writepp .)


state 168

    (71) write -> PRINT ( writep ) . ;

    ;               shift and go to state 201


state 169

    (96) line -> LINE ( sexp , . sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 202
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 170

    (97) rect -> RECT ( sexp , . sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 203
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 171

    (102) arc -> ARC ( sexp , . sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 204
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 172

    (66) asignp -> = sexp ; .

    ID              reduce using rule 66 (asignp -> = sexp ; .)
    IF              reduce using rule 66 (asignp -> = sexp ; .)
    PRINT           reduce using rule 66 (asignp -> = sexp ; .)
    FOR             reduce using rule 66 (asignp -> = sexp ; .)
    WHILE           reduce using rule 66 (asignp -> = sexp ; .)
    LINE            reduce using rule 66 (asignp -> = sexp ; .)
    RECT            reduce using rule 66 (asignp -> = sexp ; .)
    TEAPOT          reduce using rule 66 (asignp -> = sexp ; .)
    CUBE            reduce using rule 66 (asignp -> = sexp ; .)
    COLOR           reduce using rule 66 (asignp -> = sexp ; .)
    TRIANGLE        reduce using rule 66 (asignp -> = sexp ; .)
    CIRCLE          reduce using rule 66 (asignp -> = sexp ; .)
    ARC             reduce using rule 66 (asignp -> = sexp ; .)
    WIDTH           reduce using rule 66 (asignp -> = sexp ; .)
    INT             reduce using rule 66 (asignp -> = sexp ; .)
    FLOAT           reduce using rule 66 (asignp -> = sexp ; .)
    ARRINT          reduce using rule 66 (asignp -> = sexp ; .)
    ARRFLOAT        reduce using rule 66 (asignp -> = sexp ; .)
    }               reduce using rule 66 (asignp -> = sexp ; .)
    ;               reduce using rule 66 (asignp -> = sexp ; .)


state 173

    (67) asignp -> [ sexp ] . = sexp ;

    =               shift and go to state 205


state 174

    (100) cube -> CUBE ( sexp , . sexp , sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 206
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 175

    (77) for -> FOR ( asign ; . sexp ; sexp ) block
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 207
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 176

    (68) cond -> IF ( sexp ) . block condp
    (39) block -> . { body }

    {               shift and go to state 43

    block                          shift and go to state 208

state 177

    (101) color -> COLOR ( sexp , . sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 209
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 178

    (103) circle -> CIRCLE ( sexp , . sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 210
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 179

    (17) expp -> + exp .

    <               reduce using rule 17 (expp -> + exp .)
    >               reduce using rule 17 (expp -> + exp .)
    LTEQ            reduce using rule 17 (expp -> + exp .)
    GTEQ            reduce using rule 17 (expp -> + exp .)
    EQ              reduce using rule 17 (expp -> + exp .)
    DIFF            reduce using rule 17 (expp -> + exp .)
    AND             reduce using rule 17 (expp -> + exp .)
    OR              reduce using rule 17 (expp -> + exp .)
    ,               reduce using rule 17 (expp -> + exp .)
    )               reduce using rule 17 (expp -> + exp .)
    ;               reduce using rule 17 (expp -> + exp .)
    ]               reduce using rule 17 (expp -> + exp .)


state 180

    (18) expp -> - exp .

    <               reduce using rule 18 (expp -> - exp .)
    >               reduce using rule 18 (expp -> - exp .)
    LTEQ            reduce using rule 18 (expp -> - exp .)
    GTEQ            reduce using rule 18 (expp -> - exp .)
    EQ              reduce using rule 18 (expp -> - exp .)
    DIFF            reduce using rule 18 (expp -> - exp .)
    AND             reduce using rule 18 (expp -> - exp .)
    OR              reduce using rule 18 (expp -> - exp .)
    ,               reduce using rule 18 (expp -> - exp .)
    )               reduce using rule 18 (expp -> - exp .)
    ;               reduce using rule 18 (expp -> - exp .)
    ]               reduce using rule 18 (expp -> - exp .)


state 181

    (25) factor -> ( sexp ) .

    /               reduce using rule 25 (factor -> ( sexp ) .)
    *               reduce using rule 25 (factor -> ( sexp ) .)
    +               reduce using rule 25 (factor -> ( sexp ) .)
    -               reduce using rule 25 (factor -> ( sexp ) .)
    <               reduce using rule 25 (factor -> ( sexp ) .)
    >               reduce using rule 25 (factor -> ( sexp ) .)
    LTEQ            reduce using rule 25 (factor -> ( sexp ) .)
    GTEQ            reduce using rule 25 (factor -> ( sexp ) .)
    EQ              reduce using rule 25 (factor -> ( sexp ) .)
    DIFF            reduce using rule 25 (factor -> ( sexp ) .)
    AND             reduce using rule 25 (factor -> ( sexp ) .)
    OR              reduce using rule 25 (factor -> ( sexp ) .)
    )               reduce using rule 25 (factor -> ( sexp ) .)
    ,               reduce using rule 25 (factor -> ( sexp ) .)
    ;               reduce using rule 25 (factor -> ( sexp ) .)
    ]               reduce using rule 25 (factor -> ( sexp ) .)


state 182

    (92) idpp -> sexp . idppaux
    (94) idppaux -> . , idpp
    (95) idppaux -> . empty
    (105) empty -> .

    ,               shift and go to state 212
    )               reduce using rule 105 (empty -> .)

    idppaux                        shift and go to state 211
    empty                          shift and go to state 213

state 183

    (90) idp -> ( idpp . )

    )               shift and go to state 214


state 184

    (93) idpp -> empty .

    )               reduce using rule 93 (idpp -> empty .)


state 185

    (89) idp -> [ sexp . ]

    ]               shift and go to state 215


state 186

    (99) triangle -> TRIANGLE ( sexp , sexp . , sexp , sexp ) ;

    ,               shift and go to state 216


state 187

    (12) expressionp -> GTEQ exp .

    AND             reduce using rule 12 (expressionp -> GTEQ exp .)
    OR              reduce using rule 12 (expressionp -> GTEQ exp .)
    ,               reduce using rule 12 (expressionp -> GTEQ exp .)
    )               reduce using rule 12 (expressionp -> GTEQ exp .)
    ;               reduce using rule 12 (expressionp -> GTEQ exp .)
    ]               reduce using rule 12 (expressionp -> GTEQ exp .)


state 188

    (11) expressionp -> LTEQ exp .

    AND             reduce using rule 11 (expressionp -> LTEQ exp .)
    OR              reduce using rule 11 (expressionp -> LTEQ exp .)
    ,               reduce using rule 11 (expressionp -> LTEQ exp .)
    )               reduce using rule 11 (expressionp -> LTEQ exp .)
    ;               reduce using rule 11 (expressionp -> LTEQ exp .)
    ]               reduce using rule 11 (expressionp -> LTEQ exp .)


state 189

    (14) expressionp -> DIFF exp .

    AND             reduce using rule 14 (expressionp -> DIFF exp .)
    OR              reduce using rule 14 (expressionp -> DIFF exp .)
    ,               reduce using rule 14 (expressionp -> DIFF exp .)
    )               reduce using rule 14 (expressionp -> DIFF exp .)
    ;               reduce using rule 14 (expressionp -> DIFF exp .)
    ]               reduce using rule 14 (expressionp -> DIFF exp .)


state 190

    (13) expressionp -> EQ exp .

    AND             reduce using rule 13 (expressionp -> EQ exp .)
    OR              reduce using rule 13 (expressionp -> EQ exp .)
    ,               reduce using rule 13 (expressionp -> EQ exp .)
    )               reduce using rule 13 (expressionp -> EQ exp .)
    ;               reduce using rule 13 (expressionp -> EQ exp .)
    ]               reduce using rule 13 (expressionp -> EQ exp .)


state 191

    (9) expressionp -> < exp .

    AND             reduce using rule 9 (expressionp -> < exp .)
    OR              reduce using rule 9 (expressionp -> < exp .)
    ,               reduce using rule 9 (expressionp -> < exp .)
    )               reduce using rule 9 (expressionp -> < exp .)
    ;               reduce using rule 9 (expressionp -> < exp .)
    ]               reduce using rule 9 (expressionp -> < exp .)


state 192

    (10) expressionp -> > exp .

    AND             reduce using rule 10 (expressionp -> > exp .)
    OR              reduce using rule 10 (expressionp -> > exp .)
    ,               reduce using rule 10 (expressionp -> > exp .)
    )               reduce using rule 10 (expressionp -> > exp .)
    ;               reduce using rule 10 (expressionp -> > exp .)
    ]               reduce using rule 10 (expressionp -> > exp .)


state 193

    (22) termp -> * term .

    +               reduce using rule 22 (termp -> * term .)
    -               reduce using rule 22 (termp -> * term .)
    <               reduce using rule 22 (termp -> * term .)
    >               reduce using rule 22 (termp -> * term .)
    LTEQ            reduce using rule 22 (termp -> * term .)
    GTEQ            reduce using rule 22 (termp -> * term .)
    EQ              reduce using rule 22 (termp -> * term .)
    DIFF            reduce using rule 22 (termp -> * term .)
    AND             reduce using rule 22 (termp -> * term .)
    OR              reduce using rule 22 (termp -> * term .)
    ,               reduce using rule 22 (termp -> * term .)
    )               reduce using rule 22 (termp -> * term .)
    ;               reduce using rule 22 (termp -> * term .)
    ]               reduce using rule 22 (termp -> * term .)


state 194

    (21) termp -> / term .

    +               reduce using rule 21 (termp -> / term .)
    -               reduce using rule 21 (termp -> / term .)
    <               reduce using rule 21 (termp -> / term .)
    >               reduce using rule 21 (termp -> / term .)
    LTEQ            reduce using rule 21 (termp -> / term .)
    GTEQ            reduce using rule 21 (termp -> / term .)
    EQ              reduce using rule 21 (termp -> / term .)
    DIFF            reduce using rule 21 (termp -> / term .)
    AND             reduce using rule 21 (termp -> / term .)
    OR              reduce using rule 21 (termp -> / term .)
    ,               reduce using rule 21 (termp -> / term .)
    )               reduce using rule 21 (termp -> / term .)
    ;               reduce using rule 21 (termp -> / term .)
    ]               reduce using rule 21 (termp -> / term .)


state 195

    (5) sexprima -> AND sexp .

    ,               reduce using rule 5 (sexprima -> AND sexp .)
    )               reduce using rule 5 (sexprima -> AND sexp .)
    ;               reduce using rule 5 (sexprima -> AND sexp .)
    ]               reduce using rule 5 (sexprima -> AND sexp .)


state 196

    (6) sexprima -> OR sexp .

    ,               reduce using rule 6 (sexprima -> OR sexp .)
    )               reduce using rule 6 (sexprima -> OR sexp .)
    ;               reduce using rule 6 (sexprima -> OR sexp .)
    ]               reduce using rule 6 (sexprima -> OR sexp .)


state 197

    (98) teapot -> TEAPOT ( sexp , sexp . , sexp , sexp ) ;

    ,               shift and go to state 217


state 198

    (104) width -> WIDTH ( sexp ) ; .

    ID              reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    IF              reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    PRINT           reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    FOR             reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    WHILE           reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    LINE            reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    RECT            reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    TEAPOT          reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    CUBE            reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    COLOR           reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    TRIANGLE        reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    CIRCLE          reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    ARC             reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    WIDTH           reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    INT             reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    FLOAT           reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    ARRINT          reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    ARRFLOAT        reduce using rule 104 (width -> WIDTH ( sexp ) ; .)
    }               reduce using rule 104 (width -> WIDTH ( sexp ) ; .)


state 199

    (78) while -> WHILE ( sexp ) block .

    ID              reduce using rule 78 (while -> WHILE ( sexp ) block .)
    IF              reduce using rule 78 (while -> WHILE ( sexp ) block .)
    PRINT           reduce using rule 78 (while -> WHILE ( sexp ) block .)
    FOR             reduce using rule 78 (while -> WHILE ( sexp ) block .)
    WHILE           reduce using rule 78 (while -> WHILE ( sexp ) block .)
    LINE            reduce using rule 78 (while -> WHILE ( sexp ) block .)
    RECT            reduce using rule 78 (while -> WHILE ( sexp ) block .)
    TEAPOT          reduce using rule 78 (while -> WHILE ( sexp ) block .)
    CUBE            reduce using rule 78 (while -> WHILE ( sexp ) block .)
    COLOR           reduce using rule 78 (while -> WHILE ( sexp ) block .)
    TRIANGLE        reduce using rule 78 (while -> WHILE ( sexp ) block .)
    CIRCLE          reduce using rule 78 (while -> WHILE ( sexp ) block .)
    ARC             reduce using rule 78 (while -> WHILE ( sexp ) block .)
    WIDTH           reduce using rule 78 (while -> WHILE ( sexp ) block .)
    INT             reduce using rule 78 (while -> WHILE ( sexp ) block .)
    FLOAT           reduce using rule 78 (while -> WHILE ( sexp ) block .)
    ARRINT          reduce using rule 78 (while -> WHILE ( sexp ) block .)
    ARRFLOAT        reduce using rule 78 (while -> WHILE ( sexp ) block .)
    }               reduce using rule 78 (while -> WHILE ( sexp ) block .)


state 200

    (75) writepp -> , writep .

    )               reduce using rule 75 (writepp -> , writep .)


state 201

    (71) write -> PRINT ( writep ) ; .

    ID              reduce using rule 71 (write -> PRINT ( writep ) ; .)
    IF              reduce using rule 71 (write -> PRINT ( writep ) ; .)
    PRINT           reduce using rule 71 (write -> PRINT ( writep ) ; .)
    FOR             reduce using rule 71 (write -> PRINT ( writep ) ; .)
    WHILE           reduce using rule 71 (write -> PRINT ( writep ) ; .)
    LINE            reduce using rule 71 (write -> PRINT ( writep ) ; .)
    RECT            reduce using rule 71 (write -> PRINT ( writep ) ; .)
    TEAPOT          reduce using rule 71 (write -> PRINT ( writep ) ; .)
    CUBE            reduce using rule 71 (write -> PRINT ( writep ) ; .)
    COLOR           reduce using rule 71 (write -> PRINT ( writep ) ; .)
    TRIANGLE        reduce using rule 71 (write -> PRINT ( writep ) ; .)
    CIRCLE          reduce using rule 71 (write -> PRINT ( writep ) ; .)
    ARC             reduce using rule 71 (write -> PRINT ( writep ) ; .)
    WIDTH           reduce using rule 71 (write -> PRINT ( writep ) ; .)
    INT             reduce using rule 71 (write -> PRINT ( writep ) ; .)
    FLOAT           reduce using rule 71 (write -> PRINT ( writep ) ; .)
    ARRINT          reduce using rule 71 (write -> PRINT ( writep ) ; .)
    ARRFLOAT        reduce using rule 71 (write -> PRINT ( writep ) ; .)
    }               reduce using rule 71 (write -> PRINT ( writep ) ; .)


state 202

    (96) line -> LINE ( sexp , sexp . , sexp , sexp ) ;

    ,               shift and go to state 218


state 203

    (97) rect -> RECT ( sexp , sexp . , sexp , sexp ) ;

    ,               shift and go to state 219


state 204

    (102) arc -> ARC ( sexp , sexp . , sexp , sexp ) ;

    ,               shift and go to state 220


state 205

    (67) asignp -> [ sexp ] = . sexp ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 221
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 206

    (100) cube -> CUBE ( sexp , sexp . , sexp , sexp ) ;

    ,               shift and go to state 222


state 207

    (77) for -> FOR ( asign ; sexp . ; sexp ) block

    ;               shift and go to state 223


state 208

    (68) cond -> IF ( sexp ) block . condp
    (69) condp -> . ELSE block
    (70) condp -> . empty
    (105) empty -> .

    ELSE            shift and go to state 225
    ID              reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    PRINT           reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    WHILE           reduce using rule 105 (empty -> .)
    LINE            reduce using rule 105 (empty -> .)
    RECT            reduce using rule 105 (empty -> .)
    TEAPOT          reduce using rule 105 (empty -> .)
    CUBE            reduce using rule 105 (empty -> .)
    COLOR           reduce using rule 105 (empty -> .)
    TRIANGLE        reduce using rule 105 (empty -> .)
    CIRCLE          reduce using rule 105 (empty -> .)
    ARC             reduce using rule 105 (empty -> .)
    WIDTH           reduce using rule 105 (empty -> .)
    INT             reduce using rule 105 (empty -> .)
    FLOAT           reduce using rule 105 (empty -> .)
    ARRINT          reduce using rule 105 (empty -> .)
    ARRFLOAT        reduce using rule 105 (empty -> .)
    }               reduce using rule 105 (empty -> .)

    empty                          shift and go to state 226
    condp                          shift and go to state 224

state 209

    (101) color -> COLOR ( sexp , sexp . , sexp ) ;

    ,               shift and go to state 227


state 210

    (103) circle -> CIRCLE ( sexp , sexp . , sexp ) ;

    ,               shift and go to state 228


state 211

    (92) idpp -> sexp idppaux .

    )               reduce using rule 92 (idpp -> sexp idppaux .)


state 212

    (94) idppaux -> , . idpp
    (92) idpp -> . sexp idppaux
    (93) idpp -> . empty
    (4) sexp -> . expression sexprima
    (105) empty -> .
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    )               reduce using rule 105 (empty -> .)
    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 182
    idpp                           shift and go to state 229
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116
    empty                          shift and go to state 184

state 213

    (95) idppaux -> empty .

    )               reduce using rule 95 (idppaux -> empty .)


state 214

    (90) idp -> ( idpp ) .

    /               reduce using rule 90 (idp -> ( idpp ) .)
    *               reduce using rule 90 (idp -> ( idpp ) .)
    +               reduce using rule 90 (idp -> ( idpp ) .)
    -               reduce using rule 90 (idp -> ( idpp ) .)
    <               reduce using rule 90 (idp -> ( idpp ) .)
    >               reduce using rule 90 (idp -> ( idpp ) .)
    LTEQ            reduce using rule 90 (idp -> ( idpp ) .)
    GTEQ            reduce using rule 90 (idp -> ( idpp ) .)
    EQ              reduce using rule 90 (idp -> ( idpp ) .)
    DIFF            reduce using rule 90 (idp -> ( idpp ) .)
    AND             reduce using rule 90 (idp -> ( idpp ) .)
    OR              reduce using rule 90 (idp -> ( idpp ) .)
    ,               reduce using rule 90 (idp -> ( idpp ) .)
    )               reduce using rule 90 (idp -> ( idpp ) .)
    ;               reduce using rule 90 (idp -> ( idpp ) .)
    ]               reduce using rule 90 (idp -> ( idpp ) .)


state 215

    (89) idp -> [ sexp ] .

    /               reduce using rule 89 (idp -> [ sexp ] .)
    *               reduce using rule 89 (idp -> [ sexp ] .)
    +               reduce using rule 89 (idp -> [ sexp ] .)
    -               reduce using rule 89 (idp -> [ sexp ] .)
    <               reduce using rule 89 (idp -> [ sexp ] .)
    >               reduce using rule 89 (idp -> [ sexp ] .)
    LTEQ            reduce using rule 89 (idp -> [ sexp ] .)
    GTEQ            reduce using rule 89 (idp -> [ sexp ] .)
    EQ              reduce using rule 89 (idp -> [ sexp ] .)
    DIFF            reduce using rule 89 (idp -> [ sexp ] .)
    AND             reduce using rule 89 (idp -> [ sexp ] .)
    OR              reduce using rule 89 (idp -> [ sexp ] .)
    ,               reduce using rule 89 (idp -> [ sexp ] .)
    )               reduce using rule 89 (idp -> [ sexp ] .)
    ;               reduce using rule 89 (idp -> [ sexp ] .)
    ]               reduce using rule 89 (idp -> [ sexp ] .)


state 216

    (99) triangle -> TRIANGLE ( sexp , sexp , . sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 230
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 217

    (98) teapot -> TEAPOT ( sexp , sexp , . sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 231
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 218

    (96) line -> LINE ( sexp , sexp , . sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 232
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 219

    (97) rect -> RECT ( sexp , sexp , . sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 233
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 220

    (102) arc -> ARC ( sexp , sexp , . sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 234
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 221

    (67) asignp -> [ sexp ] = sexp . ;

    ;               shift and go to state 235


state 222

    (100) cube -> CUBE ( sexp , sexp , . sexp , sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 236
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 223

    (77) for -> FOR ( asign ; sexp ; . sexp ) block
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 237
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 224

    (68) cond -> IF ( sexp ) block condp .

    ID              reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    IF              reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    PRINT           reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    FOR             reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    WHILE           reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    LINE            reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    RECT            reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    TEAPOT          reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    CUBE            reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    COLOR           reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    TRIANGLE        reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    CIRCLE          reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    ARC             reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    WIDTH           reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    INT             reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    FLOAT           reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    ARRINT          reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    ARRFLOAT        reduce using rule 68 (cond -> IF ( sexp ) block condp .)
    }               reduce using rule 68 (cond -> IF ( sexp ) block condp .)


state 225

    (69) condp -> ELSE . block
    (39) block -> . { body }

    {               shift and go to state 43

    block                          shift and go to state 238

state 226

    (70) condp -> empty .

    ID              reduce using rule 70 (condp -> empty .)
    IF              reduce using rule 70 (condp -> empty .)
    PRINT           reduce using rule 70 (condp -> empty .)
    FOR             reduce using rule 70 (condp -> empty .)
    WHILE           reduce using rule 70 (condp -> empty .)
    LINE            reduce using rule 70 (condp -> empty .)
    RECT            reduce using rule 70 (condp -> empty .)
    TEAPOT          reduce using rule 70 (condp -> empty .)
    CUBE            reduce using rule 70 (condp -> empty .)
    COLOR           reduce using rule 70 (condp -> empty .)
    TRIANGLE        reduce using rule 70 (condp -> empty .)
    CIRCLE          reduce using rule 70 (condp -> empty .)
    ARC             reduce using rule 70 (condp -> empty .)
    WIDTH           reduce using rule 70 (condp -> empty .)
    INT             reduce using rule 70 (condp -> empty .)
    FLOAT           reduce using rule 70 (condp -> empty .)
    ARRINT          reduce using rule 70 (condp -> empty .)
    ARRFLOAT        reduce using rule 70 (condp -> empty .)
    }               reduce using rule 70 (condp -> empty .)


state 227

    (101) color -> COLOR ( sexp , sexp , . sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 239
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 228

    (103) circle -> CIRCLE ( sexp , sexp , . sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 240
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 229

    (94) idppaux -> , idpp .

    )               reduce using rule 94 (idppaux -> , idpp .)


state 230

    (99) triangle -> TRIANGLE ( sexp , sexp , sexp . , sexp ) ;

    ,               shift and go to state 241


state 231

    (98) teapot -> TEAPOT ( sexp , sexp , sexp . , sexp ) ;

    ,               shift and go to state 242


state 232

    (96) line -> LINE ( sexp , sexp , sexp . , sexp ) ;

    ,               shift and go to state 243


state 233

    (97) rect -> RECT ( sexp , sexp , sexp . , sexp ) ;

    ,               shift and go to state 244


state 234

    (102) arc -> ARC ( sexp , sexp , sexp . , sexp ) ;

    ,               shift and go to state 245


state 235

    (67) asignp -> [ sexp ] = sexp ; .

    ID              reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    IF              reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    PRINT           reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    FOR             reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    WHILE           reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    LINE            reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    RECT            reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    TEAPOT          reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    CUBE            reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    COLOR           reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    TRIANGLE        reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    CIRCLE          reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    ARC             reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    WIDTH           reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    INT             reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    FLOAT           reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    ARRINT          reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    ARRFLOAT        reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    }               reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)
    ;               reduce using rule 67 (asignp -> [ sexp ] = sexp ; .)


state 236

    (100) cube -> CUBE ( sexp , sexp , sexp . , sexp ) ;

    ,               shift and go to state 246


state 237

    (77) for -> FOR ( asign ; sexp ; sexp . ) block

    )               shift and go to state 247


state 238

    (69) condp -> ELSE block .

    ID              reduce using rule 69 (condp -> ELSE block .)
    IF              reduce using rule 69 (condp -> ELSE block .)
    PRINT           reduce using rule 69 (condp -> ELSE block .)
    FOR             reduce using rule 69 (condp -> ELSE block .)
    WHILE           reduce using rule 69 (condp -> ELSE block .)
    LINE            reduce using rule 69 (condp -> ELSE block .)
    RECT            reduce using rule 69 (condp -> ELSE block .)
    TEAPOT          reduce using rule 69 (condp -> ELSE block .)
    CUBE            reduce using rule 69 (condp -> ELSE block .)
    COLOR           reduce using rule 69 (condp -> ELSE block .)
    TRIANGLE        reduce using rule 69 (condp -> ELSE block .)
    CIRCLE          reduce using rule 69 (condp -> ELSE block .)
    ARC             reduce using rule 69 (condp -> ELSE block .)
    WIDTH           reduce using rule 69 (condp -> ELSE block .)
    INT             reduce using rule 69 (condp -> ELSE block .)
    FLOAT           reduce using rule 69 (condp -> ELSE block .)
    ARRINT          reduce using rule 69 (condp -> ELSE block .)
    ARRFLOAT        reduce using rule 69 (condp -> ELSE block .)
    }               reduce using rule 69 (condp -> ELSE block .)


state 239

    (101) color -> COLOR ( sexp , sexp , sexp . ) ;

    )               shift and go to state 248


state 240

    (103) circle -> CIRCLE ( sexp , sexp , sexp . ) ;

    )               shift and go to state 249


state 241

    (99) triangle -> TRIANGLE ( sexp , sexp , sexp , . sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 250
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 242

    (98) teapot -> TEAPOT ( sexp , sexp , sexp , . sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 251
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 243

    (96) line -> LINE ( sexp , sexp , sexp , . sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 252
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 244

    (97) rect -> RECT ( sexp , sexp , sexp , . sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 253
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 245

    (102) arc -> ARC ( sexp , sexp , sexp , . sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 254
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 246

    (100) cube -> CUBE ( sexp , sexp , sexp , . sexp ) ;
    (4) sexp -> . expression sexprima
    (8) expression -> . exp expressionp
    (16) exp -> . term expp
    (20) term -> . factor termp
    (24) factor -> . cons
    (25) factor -> . ( sexp )
    (26) cons -> . id
    (27) cons -> . CTEI
    (28) cons -> . CTEF
    (29) cons -> . CTES
    (88) id -> . ID idp

    (               shift and go to state 108
    CTEI            shift and go to state 114
    CTEF            shift and go to state 111
    CTES            shift and go to state 105
    ID              shift and go to state 109

    term                           shift and go to state 106
    cons                           shift and go to state 107
    sexp                           shift and go to state 255
    exp                            shift and go to state 112
    factor                         shift and go to state 113
    expression                     shift and go to state 115
    id                             shift and go to state 116

state 247

    (77) for -> FOR ( asign ; sexp ; sexp ) . block
    (39) block -> . { body }

    {               shift and go to state 43

    block                          shift and go to state 256

state 248

    (101) color -> COLOR ( sexp , sexp , sexp ) . ;

    ;               shift and go to state 257


state 249

    (103) circle -> CIRCLE ( sexp , sexp , sexp ) . ;

    ;               shift and go to state 258


state 250

    (99) triangle -> TRIANGLE ( sexp , sexp , sexp , sexp . ) ;

    )               shift and go to state 259


state 251

    (98) teapot -> TEAPOT ( sexp , sexp , sexp , sexp . ) ;

    )               shift and go to state 260


state 252

    (96) line -> LINE ( sexp , sexp , sexp , sexp . ) ;

    )               shift and go to state 261


state 253

    (97) rect -> RECT ( sexp , sexp , sexp , sexp . ) ;

    )               shift and go to state 262


state 254

    (102) arc -> ARC ( sexp , sexp , sexp , sexp . ) ;

    )               shift and go to state 263


state 255

    (100) cube -> CUBE ( sexp , sexp , sexp , sexp . ) ;

    )               shift and go to state 264


state 256

    (77) for -> FOR ( asign ; sexp ; sexp ) block .

    ID              reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    IF              reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    PRINT           reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    FOR             reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    WHILE           reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    LINE            reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    RECT            reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    TEAPOT          reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    CUBE            reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    COLOR           reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    TRIANGLE        reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    CIRCLE          reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    ARC             reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    WIDTH           reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    INT             reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    FLOAT           reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    ARRINT          reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    ARRFLOAT        reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)
    }               reduce using rule 77 (for -> FOR ( asign ; sexp ; sexp ) block .)


state 257

    (101) color -> COLOR ( sexp , sexp , sexp ) ; .

    ID              reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    IF              reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    PRINT           reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    FOR             reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    WHILE           reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    LINE            reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    RECT            reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    TEAPOT          reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    CUBE            reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    COLOR           reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    TRIANGLE        reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    CIRCLE          reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    ARC             reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    WIDTH           reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    INT             reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    FLOAT           reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    ARRINT          reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    ARRFLOAT        reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)
    }               reduce using rule 101 (color -> COLOR ( sexp , sexp , sexp ) ; .)


state 258

    (103) circle -> CIRCLE ( sexp , sexp , sexp ) ; .

    ID              reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    IF              reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    PRINT           reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    FOR             reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    WHILE           reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    LINE            reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    RECT            reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    TEAPOT          reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    CUBE            reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    COLOR           reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    TRIANGLE        reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    CIRCLE          reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    ARC             reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    WIDTH           reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    INT             reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    FLOAT           reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    ARRINT          reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    ARRFLOAT        reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)
    }               reduce using rule 103 (circle -> CIRCLE ( sexp , sexp , sexp ) ; .)


state 259

    (99) triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) . ;

    ;               shift and go to state 265


state 260

    (98) teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) . ;

    ;               shift and go to state 266


state 261

    (96) line -> LINE ( sexp , sexp , sexp , sexp ) . ;

    ;               shift and go to state 267


state 262

    (97) rect -> RECT ( sexp , sexp , sexp , sexp ) . ;

    ;               shift and go to state 268


state 263

    (102) arc -> ARC ( sexp , sexp , sexp , sexp ) . ;

    ;               shift and go to state 269


state 264

    (100) cube -> CUBE ( sexp , sexp , sexp , sexp ) . ;

    ;               shift and go to state 270


state 265

    (99) triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .

    ID              reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    IF              reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    PRINT           reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    FOR             reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    WHILE           reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    LINE            reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    RECT            reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    TEAPOT          reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    CUBE            reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    COLOR           reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    TRIANGLE        reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    CIRCLE          reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    ARC             reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    WIDTH           reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    INT             reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    FLOAT           reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    ARRINT          reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    ARRFLOAT        reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)
    }               reduce using rule 99 (triangle -> TRIANGLE ( sexp , sexp , sexp , sexp ) ; .)


state 266

    (98) teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .

    ID              reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    IF              reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    PRINT           reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    FOR             reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    WHILE           reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    LINE            reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    RECT            reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    TEAPOT          reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    CUBE            reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    COLOR           reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    TRIANGLE        reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    CIRCLE          reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    ARC             reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    WIDTH           reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    INT             reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    FLOAT           reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    ARRINT          reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    ARRFLOAT        reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)
    }               reduce using rule 98 (teapot -> TEAPOT ( sexp , sexp , sexp , sexp ) ; .)


state 267

    (96) line -> LINE ( sexp , sexp , sexp , sexp ) ; .

    ID              reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    IF              reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    PRINT           reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    FOR             reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    WHILE           reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    LINE            reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    RECT            reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    TEAPOT          reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    CUBE            reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    COLOR           reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    TRIANGLE        reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    CIRCLE          reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    ARC             reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    WIDTH           reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    INT             reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    FLOAT           reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    ARRINT          reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    ARRFLOAT        reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)
    }               reduce using rule 96 (line -> LINE ( sexp , sexp , sexp , sexp ) ; .)


state 268

    (97) rect -> RECT ( sexp , sexp , sexp , sexp ) ; .

    ID              reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    IF              reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    PRINT           reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    FOR             reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    WHILE           reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    LINE            reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    RECT            reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    TEAPOT          reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    CUBE            reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    COLOR           reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    TRIANGLE        reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    CIRCLE          reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    ARC             reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    WIDTH           reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    INT             reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    FLOAT           reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    ARRINT          reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    ARRFLOAT        reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)
    }               reduce using rule 97 (rect -> RECT ( sexp , sexp , sexp , sexp ) ; .)


state 269

    (102) arc -> ARC ( sexp , sexp , sexp , sexp ) ; .

    ID              reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    IF              reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    PRINT           reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    FOR             reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    WHILE           reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    LINE            reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    RECT            reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    TEAPOT          reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    CUBE            reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    COLOR           reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    TRIANGLE        reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    CIRCLE          reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    ARC             reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    WIDTH           reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    INT             reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    FLOAT           reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    ARRINT          reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    ARRFLOAT        reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)
    }               reduce using rule 102 (arc -> ARC ( sexp , sexp , sexp , sexp ) ; .)


state 270

    (100) cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .

    ID              reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    IF              reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    PRINT           reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    FOR             reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    WHILE           reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    LINE            reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    RECT            reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    TEAPOT          reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    CUBE            reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    COLOR           reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    TRIANGLE        reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    CIRCLE          reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    ARC             reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    WIDTH           reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    INT             reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    FLOAT           reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    ARRINT          reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    ARRFLOAT        reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)
    }               reduce using rule 100 (cube -> CUBE ( sexp , sexp , sexp , sexp ) ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 14 resolved as shift
WARNING: shift/reduce conflict for INT in state 27 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 27 resolved as shift
WARNING: shift/reduce conflict for ARRINT in state 27 resolved as shift
WARNING: shift/reduce conflict for ARRFLOAT in state 27 resolved as shift
WARNING: shift/reduce conflict for INT in state 43 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 43 resolved as shift
WARNING: shift/reduce conflict for ARRINT in state 43 resolved as shift
WARNING: shift/reduce conflict for ARRFLOAT in state 43 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 48 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 48 resolved as shift
WARNING: shift/reduce conflict for FOR in state 48 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 48 resolved as shift
WARNING: shift/reduce conflict for LINE in state 48 resolved as shift
WARNING: shift/reduce conflict for RECT in state 48 resolved as shift
WARNING: shift/reduce conflict for TEAPOT in state 48 resolved as shift
WARNING: shift/reduce conflict for CUBE in state 48 resolved as shift
WARNING: shift/reduce conflict for COLOR in state 48 resolved as shift
WARNING: shift/reduce conflict for TRIANGLE in state 48 resolved as shift
WARNING: shift/reduce conflict for CIRCLE in state 48 resolved as shift
WARNING: shift/reduce conflict for ARC in state 48 resolved as shift
WARNING: shift/reduce conflict for WIDTH in state 48 resolved as shift
WARNING: shift/reduce conflict for INT in state 48 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 48 resolved as shift
WARNING: shift/reduce conflict for ARRINT in state 48 resolved as shift
WARNING: shift/reduce conflict for ARRFLOAT in state 48 resolved as shift
WARNING: shift/reduce conflict for ID in state 79 resolved as shift
WARNING: shift/reduce conflict for IF in state 79 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 79 resolved as shift
WARNING: shift/reduce conflict for FOR in state 79 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 79 resolved as shift
WARNING: shift/reduce conflict for LINE in state 79 resolved as shift
WARNING: shift/reduce conflict for RECT in state 79 resolved as shift
WARNING: shift/reduce conflict for TEAPOT in state 79 resolved as shift
WARNING: shift/reduce conflict for CUBE in state 79 resolved as shift
WARNING: shift/reduce conflict for COLOR in state 79 resolved as shift
WARNING: shift/reduce conflict for TRIANGLE in state 79 resolved as shift
WARNING: shift/reduce conflict for CIRCLE in state 79 resolved as shift
WARNING: shift/reduce conflict for ARC in state 79 resolved as shift
WARNING: shift/reduce conflict for WIDTH in state 79 resolved as shift
WARNING: shift/reduce conflict for INT in state 79 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 79 resolved as shift
WARNING: shift/reduce conflict for ARRINT in state 79 resolved as shift
WARNING: shift/reduce conflict for ARRFLOAT in state 79 resolved as shift
WARNING: shift/reduce conflict for , in state 120 resolved as shift
WARNING: shift/reduce conflict for , in state 122 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (vars -> empty)
WARNING: rejected rule (varsp -> empty) in state 9
WARNING: reduce/reduce conflict in state 16 resolved using rule (programp -> empty)
WARNING: rejected rule (functions -> empty) in state 16
WARNING: reduce/reduce conflict in state 72 resolved using rule (statmp -> empty)
WARNING: rejected rule (statm -> empty) in state 72
WARNING: reduce/reduce conflict in state 72 resolved using rule (statm -> empty)
WARNING: rejected rule (vars -> empty) in state 72
WARNING: reduce/reduce conflict in state 72 resolved using rule (statmp -> empty)
WARNING: rejected rule (vars -> empty) in state 72
WARNING: reduce/reduce conflict in state 72 resolved using rule (statm -> empty)
WARNING: rejected rule (varsp -> empty) in state 72
WARNING: reduce/reduce conflict in state 72 resolved using rule (statmp -> empty)
WARNING: rejected rule (varsp -> empty) in state 72
WARNING: reduce/reduce conflict in state 120 resolved using rule (cons -> id)
WARNING: rejected rule (empty -> <empty>) in state 120
WARNING: reduce/reduce conflict in state 122 resolved using rule (cons -> CTES)
WARNING: rejected rule (empty -> <empty>) in state 122
